%!PS-Adobe-3.1 EPSF-3.0%%Title: SumPrinc.eps%%Creator: Adobe Illustrator(R) X%%AI8_CreatorVersion: 10.0%AI9_PrintingDataBegin%%For: Ken Bogart%%CreationDate: 12/10/02%%BoundingBox: 0 0 131 79%%HiResBoundingBox: 0 0 130.4043 78.6480%%CropBox: 0 0 130.4043 78.6480%%LanguageLevel: 2%%DocumentData: Clean7Bit%ADOBeginClientInjection: DocumentHeader "AI10"%ADOEndClientInjection: DocumentHeader "AI10"%%Pages: 1%%DocumentNeededResources: %%DocumentSuppliedResources: procset Adobe_AGM_Image (1.0 0)%%+ procset Adobe_CoolType_Utility_MAKEOCF (1.13 0)%%+ procset Adobe_CoolType_Core (2.12 0)%%+ procset Adobe_AGM_Core (2.0 0)%%+ procset Adobe_AGM_Utils (1.0 0)%%DocumentFonts: %%DocumentNeededFonts: %%DocumentNeededFeatures: %%DocumentSuppliedFeatures: %%DocumentProcessColors:  Black%%DocumentCustomColors: %%CMYKCustomColor: %%RGBCustomColor: %AI7_Thumbnail: 128 80 8%%BeginData: 5258 Hex Bytes%0000330000660000990000CC0033000033330033660033990033CC0033FF%0066000066330066660066990066CC0066FF009900009933009966009999%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333%3333663333993333CC3333FF3366003366333366663366993366CC3366FF%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033%6600666600996600CC6600FF6633006633336633666633996633CC6633FF%6666006666336666666666996666CC6666FF669900669933669966669999%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF%9933009933339933669933999933CC9933FF996600996633996666996699%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100%000011111111220000002200000022222222440000004400000044444444%550000005500000055555555770000007700000077777777880000008800%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF%524C45FD81F8FD7EFFF8F8FD7EFFF8F8FD7EFFF8F8FD7EFFF8F8FD7EFFF8%F8FD7EFFF8F8FD7EFFF8F8FD7EFFF8F8FD7EFFF8F8FD7EFFF8F8FD7EFFF8%F8FD7EFFF8F8FD7EFFF8F8FD7EFFF8F8FD7EFFF8F8FD7EFFF8F8FD7EFFF8%F8FD1BFF7DFD12F8A8FD2AFF7DFD09F8A8FD1AFFF8F8FD1BFF527DFD07FF%5252FD07FF27A8FD2AFF527DFD07FF277DFD1AFFF8F8FD1BFF7D52FD07FF%277DFD07FF52A8FD2AFF7D52FD07FF27A8FD1AFFF8F8FD1BFF527DFD07FF%5252FD07FF27A8FD2AFF527DFD07FF277DFD1AFFF8F8FD1BFF7D52FD07FF%277DFD07FF277DFD2AFF7D52FD07FF27A8FD1AFFF8F8FD1BFF527DFD07FF%5252FD07FF27A8FD2AFF527DFD07FF277DFD1AFFF8F8FD1BFF7D52FD07FF%277DFD07FF52A8FD2AFF7D52FD07FF27A8FD1AFFF8F8FD1BFF527DFD07FF%5252FD07FF27A8FD2AFF527DFD07FF277DFD1AFFF8F8FD1BFF5227FD077D%2752A8A87DA8A8A87D277DFD21FFFD04A87DA8A8A87D5252A87DA8A8A87D%A8277D7DA8A8A87DA8A8A8FD12FFF8F8FD1BFFFD0A27F827F827F827F827%F87DFD21FF7DF8FD0727F827F827F827F827F8FD0927F8FD12FFF8F8FD1B%FF7D52FD07FF5252FD07FF52A8FD21FF527DFD07FF7D27FD07FF27A8FD07%FFF8FD12FFF8F8FD1BFF527DFD07FF7D27FD07FF27A8FD21FF7D52FD07FF%5227FD07FF277DFD07FFF8FD12FFF8F8FD1BFF7D52FD07FF5227FD07FF27%7DFD21FF527DFD07FF7D27FD07FF27A8FD07FFF8FD12FFF8F8FD1BFF527D%FD07FF7D27FD07FF27A8FD21FF7D52FD07FF5227FD07FF277DFD07FFF8FD%12FFF8F8FD1BFF7D52FD07FF5252FD07FF52A8FD21FF527DFD07FF7D27FD%07FF27A8FD07FFF8FD12FFF8F8FD1BFF527DFD07FF7D27FD07FF27A8FD21%FF7D52FD07FF5227FD07FF277DFD07FFF8FD12FFF8F8FD1BFF7D52FD07FF%5252FD07FF52A8FD21FF527DFD07FF7D27FD07FF27A8FD07FFF8FD12FFF8%F8FD13FF527D527D527D527D2727527D527D527D5227F87D527D527D527D%F852527D527D527D527DFD19FF52F8FD0727F8F8FD0727F8277D527D527D%527DF8FD12FFF8F8FD12FFA827527D527D527D5227275227522752275227%272752275227522727277D527D527D527DF8FD19FF5252527D527D527D52%52277D527D527D527DF8272752275227522727FD12FFF8F8FD12FFA827FD%07FF277DFD07FF7D27FD07FF277DFD07FFF8FD19FF7D52FD07FF5227FD07%FF277DFD07FFF8FD12FFF8F8FD12FF7D52FD07FF5252FD07FF5227FD07FF%277DFD07FFF8FD19FF527DFD07FF7D27FD07FF277DFD07FFF8FD12FFF8F8%FD12FFA827FD07FF277DFD07FF7D27FD07FF277DFD07FFF8FD19FF7D52FD%07FF5227FD07FF2752FD07FFF8FD12FFF8F8FD12FFA852FD07FF5252FD07%FF5252FD07FF277DFD07FFF8FD19FF527DFD07FF7D27FD07FF277DFD07FF%F8FD12FFF8F8FD12FFA827FD07FF277DFD07FF7D27FD07FF277DFD07FFF8%FD19FF7D52FD07FF5227FD07FF2752FD07FFF8FD12FFF8F8FD12FFA827FD%07FF2752FD07FF5252FD07FF277DFD07FFF8FD19FF527DFD07FF7D27FD07%FF277DFD07FFF8FD12FFF8F8FD12FFA827FD07FF277DFD07FF7D27FD07FF%277DFD07FFF8FD19FF7D52FD07FF5227FD07FF2752FD07FFF8FD12FFF8F8%FD12FFA827527D527D527D5227277D527D527D527D2727527D527D527D52%27277D527D527D527DF8FD19FF5252527D527D527D5252277D527D527D52%7DF852527D527D527D52F8FD12FFF8F8FD13FF527D527D527D527DFD0A27%F8FD0727F852527D527D527D527DFD19FFA8527D527D527D527D2752527D%527D527D5252527D527D527D527D52FD12FFF8F8FD1BFF7D52FD07FF5227%FD07FF277DFD4FFFF8F8FD1BFF527DFD07FF7D27FD07FF27A8FD4FFFF8F8%FD1BFF7D52FD07FF5252FD07FF52A8FD4FFFF8F8FD1BFF527DFD07FF7D27%FD07FF27A8FD4FFFF8F8FD1BFF7D52FD07FF5252FD07FF52A8FD4FFFF8F8%FD1BFF527DFD07FF7D27FD07FF27A8FD4FFFF8F8FD1BFF7D52FD07FF5252%FD07FF52A8FD4FFFF8F8FD1BFF52FD0927F8FD0727F8A8FD4FFFF8F8FD1C%FFA8A87DA8A8A87DA87DA87DA8A8A87DFD04A8FD4FFFF8F8FD7EFFF8F8FD%7EFFF8F8FD7EFFF8F8FD7EFFF8F8FD7EFFF8F8FD7EFFF8F8FD7EFFF8F8FD%7EFFF8F8FD7EFFF8F8FD7EFFF8F8FD7EFFF8F8FD7EFFF8F8FD7EFFF8F8FD%7EFFF8F8FD7EFFF8F8FD7EFFF8F8FD7EFFF8F8FD7EFFF8F8FD7EFFF8F8FD%7EFFF8F8FD7EFFF8F8275227522752275227522752275227522752275227%522752275227522752275227522752275227522752275227522752275227%522752275227522752275227522752275227522752275227522752275227%522752275227522752275227522752275227522752275227522752275227%522752275227522752275227522752F87DA87DA87DA87DA87DA87DA87DA8%7DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA8%7DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA8%7DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA8%7DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA8FDFCFFFFFFFF%FF%%EndData%%EndComments%%BeginDefaults%%ViewingOrientation: 1 0 0 1%%EndDefaults%%BeginProlog%ADOBeginClientInjection: DocumentProlog Start "AI10"%ADOEndClientInjection: DocumentProlog Start "AI10"%%BeginResource: procset Adobe_AGM_Utils 1.0 0%%Version: 1.0 0%%Copyright: Copyright (C) 2000-2000 Adobe Systems, Inc.  All Rights Reserved.systemdict /setpacking known{	currentpacking	true setpacking} ifuserdict /Adobe_AGM_Utils 60 dict dup begin put/bdf{	bind def} bind def/nd{	null def}bdf/xdf{	exch def}bdf/ldf {	load def}bdf/ddf{	put}bdf	/xddf{	3 -1 roll put}bdf	/xpt{	exch put}bdf/ndf{ 		exch dup where{		pop pop pop	}{		xdf	}ifelse}def/cdndf{	exch dup currentdict exch known{		pop pop	}{		exch def	}ifelse}def/bdict{	mark}bdf/edict{	counttomark 2 idiv dup dict begin {def} repeat pop currentdict end}def	/ps_level	/languagelevel where{		pop systemdict /languagelevel get exec	}{		1	}ifelsedef/level2 	ps_level 2 gedef/level3 	ps_level 3 gedef/ps_version	{version cvr} stopped {		-1	}ifdef/makereadonlyarray{	/packedarray where{		pop packedarray	}{		array astore readonly	}ifelse}bdf/map_reserved_ink_name{	dup type /stringtype eq{		dup /Red eq{			pop (_Red_)		}{			dup /Green eq{				pop (_Green_)			}{				dup /Blue eq{					pop (_Blue_)				}{					dup /Cyan eq{						pop (_Cyan_)					}{						dup /Magenta eq{							pop (_Magenta_)						}{							dup /Yellow eq{								pop (_Yellow_)							}{								dup /Black eq{									pop (_Black_)								}{									dup () cvn eq{										pop (Process)									}if								}ifelse							}ifelse						}ifelse					}ifelse				}ifelse			}ifelse		}ifelse	}if}bdf/AGMUTIL_GSTATE 22 dict def/get_gstate{	AGMUTIL_GSTATE begin	/AGMUTIL_GSTATE_clr_spc currentcolorspace def	/AGMUTIL_GSTATE_clr_indx 0 def	/AGMUTIL_GSTATE_clr_comps 12 array def	mark currentcolor counttomark		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def} repeat pop	/AGMUTIL_GSTATE_fnt rootfont def	/AGMUTIL_GSTATE_lw currentlinewidth def	/AGMUTIL_GSTATE_lc currentlinecap def	/AGMUTIL_GSTATE_lj currentlinejoin def	/AGMUTIL_GSTATE_ml currentmiterlimit def	currentdash /AGMUTIL_GSTATE_do xdf /AGMUTIL_GSTATE_da xdf	/AGMUTIL_GSTATE_sa currentstrokeadjust def		/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def	/AGMUTIL_GSTATE_op currentoverprint def	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def	currentcolortransfer cvlit /AGMUTIL_GSTATE_gy_xfer xdf cvlit /AGMUTIL_GSTATE_b_xfer xdf		cvlit /AGMUTIL_GSTATE_g_xfer xdf cvlit /AGMUTIL_GSTATE_r_xfer xdf	/AGMUTIL_GSTATE_ht currenthalftone def	/AGMUTIL_GSTATE_flt currentflat def	end}def/set_gstate{	AGMUTIL_GSTATE begin	AGMUTIL_GSTATE_clr_spc setcolorspace	AGMUTIL_GSTATE_clr_indx {AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def} repeat setcolor	AGMUTIL_GSTATE_fnt setfont	AGMUTIL_GSTATE_lw setlinewidth	AGMUTIL_GSTATE_lc setlinecap	AGMUTIL_GSTATE_lj setlinejoin	AGMUTIL_GSTATE_ml setmiterlimit	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash	AGMUTIL_GSTATE_sa setstrokeadjust		AGMUTIL_GSTATE_clr_rnd setcolorrendering	AGMUTIL_GSTATE_op setoverprint	AGMUTIL_GSTATE_bg cvx setblackgeneration	AGMUTIL_GSTATE_ucr cvx setundercolorremoval	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer		AGMUTIL_GSTATE_ht /HalftoneType get dup 9 eq exch 100 eq or		{		currenthalftone /HalftoneType get AGMUTIL_GSTATE_ht /HalftoneType get ne			{			  mark AGMUTIL_GSTATE_ht {sethalftone} stopped cleartomark			} if		}{		AGMUTIL_GSTATE_ht sethalftone		} ifelse		AGMUTIL_GSTATE_flt setflat	end}def/AGMUTIL_str256 256 string def/AGMUTIL_src256 256 string def/AGMUTIL_dst64 64 string def/AGMUTIL_srcLen nd/AGMUTIL_ndx nd/rdline{	currentfile AGMUTIL_str256 readline pop} bdf/rdcmntline{	currentfile AGMUTIL_str256 readline pop	(%) anchorsearch {pop} if} bdf/filter_cmyk{		dup type /filetype ne{		0 () /SubFileDecode filter	}if	[	exch	{		AGMUTIL_src256 readstring pop		dup length /AGMUTIL_srcLen exch def		/AGMUTIL_ndx 0 def				AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{			1 index exch get			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put			/AGMUTIL_ndx AGMUTIL_ndx 1 add def		}for		pop		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval	}	bind	/exec cvx	] cvx} bdf/AGMUTIL_imagefile nd/AGMUTIL_imbuf nd/read_image_file{	AGMUTIL_imagefile 0 setfileposition	dup /DataSource {AGMUTIL_imagefile AGMUTIL_imbuf readstring pop} put	exch	load exec}def/write_image_file{	begin	{ (AGMUTIL_imagefile) (w+) file } stopped{		false	}{		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 		Adobe_AGM_Utils/AGMUTIL_imbuf Width BitsPerComponent mul 7 add 8 idiv string ddf		1 1 Height { 			pop			DataSource dup type /filetype eq{				AGMUTIL_imbuf readstring pop			}{				exec			} ifelse			AGMUTIL_imagefile exch writestring		}for		true	}ifelse	end}def/close_image_file{	AGMUTIL_imagefile closefile (AGMUTIL_imagefile) deletefile}def/consumeimagedata{	begin	currentdict /MultipleDataSources known not		{/MultipleDataSources false def} if	MultipleDataSources		{		1 dict begin		/flushbuffer Width cvi string def		1 1 Height cvi			{			pop			0 1 DataSource length 1 sub				{				DataSource exch get				dup type dup 				/filetype eq					{					exch flushbuffer readstring pop pop					}if				/arraytype eq					{					exec pop					}if				}for			}for		end		}		{		/DataSource load type dup 		/filetype eq			{			1 dict begin			/flushbuffer Width Decode length 2 div mul cvi string def			1 1 Height { pop DataSource flushbuffer readstring pop pop} for			end			}if		/arraytype eq			{			1 1 Height { pop DataSource pop } for			}if		}ifelse	end}bdf/addprocs{     2{/exec load}repeat     3 1 roll     [ 5 1 roll ] bind cvx}def/modify_halftone_xfer{	currenthalftone dup length dict copy begin    currentdict 2 index known{    	1 index load dup length dict copy begin		currentdict/TransferFunction known{			/TransferFunction load		}{			currenttransfer		}ifelse	    addprocs /TransferFunction xdf 	    currentdict end def		currentdict end sethalftone	}{ 		currentdict/TransferFunction known{			/TransferFunction load 		}{			currenttransfer		}ifelse		addprocs /TransferFunction xdf		currentdict end sethalftone				pop	}ifelse}def/doc_setup{	Adobe_AGM_Utils begin}bdf/doc_trailer{	currentdict Adobe_AGM_Utils eq{		end	}if}bdfsystemdict /setpacking known{	setpacking} if%%EndResource%%BeginResource: procset Adobe_AGM_Core 2.0 0%%Version: 2.0 0%%Copyright: Copyright (C) 1997-1999 Adobe Systems, Inc.  All Rights Reserved.systemdict /setpacking known{	currentpacking	true setpacking} ifuserdict /Adobe_AGM_Core 205 dict dup begin put/nd{	null def}bind def/Adobe_AGM_Core_Id /Adobe_AGM_Core_2.0_0 def/AGMCORE_str256 256 string def/AGMCORE_src256 256 string def/AGMCORE_save nd/AGMCORE_graphicsave nd/AGMCORE_c 0 def/AGMCORE_m 0 def/AGMCORE_y 0 def/AGMCORE_k 0 def/AGMCORE_cmykbuf 4 array def/AGMCORE_screen [currentscreen] cvx def/AGMCORE_tmp 0 def/AGMCORE_&setgray nd/AGMCORE_&setcolor nd/AGMCORE_&setcolorspace nd/AGMCORE_&setcmykcolor nd/AGMCORE_cyan_plate nd/AGMCORE_magenta_plate nd/AGMCORE_yellow_plate nd/AGMCORE_black_plate nd/AGMCORE_plate_ndx nd/AGMCORE_get_ink_data nd/AGMCORE_is_cmyk_sep nd/AGMCORE_host_sep nd/AGMCORE_will_host_sep nd/AGMCORE_avoid_L2_sep_space nd/AGMCORE_distilling nd/AGMCORE_composite_job nd/AGMCORE_producing_seps nd/AGMCORE_ps_level -1 def/AGMCORE_ps_version -1 def/AGMCORE_environ_ok nd/AGMCORE_CSA_cache 0 dict def/AGMCORE_CSD_cache 0 dict def/AGMCORE_pattern_cache 0 dict def/AGMCORE_currentoverprint false def/AGMCORE_deltaX nd/AGMCORE_deltaY nd/AGMCORE_name nd/AGMCORE_sep_special nd/AGMCORE_err_strings 4 dict def/AGMCORE_cur_err nd/AGMCORE_ovp nd/AGMCORE_current_spot_alias false def/AGMCORE_inverting false def/AGMCORE_feature_dictCount nd/AGMCORE_feature_opCount nd/AGMCORE_feature_ctm nd/AGMCORE_ConvertToProcess false def/AGMCORE_Default_CTM matrix def/knockout_unitsq nd/AGMCORE_CRD_cache where{	pop}{	/AGMCORE_CRD_cache 0 dict def}ifelse/AGMCORE_key_known{	where{		/Adobe_AGM_Core_Id known	}{		false	}ifelse}ndf/flushinput{	save	/CompareBuffer 3 -1 roll def	/readbuffer 256 string def	mark	{	currentfile readbuffer {readline} stopped		{cleartomark mark}		{		not			{pop exit}		if		CompareBuffer eq			{exit}		if		}ifelse	}loop	cleartomark	restore}bdf/getspotfunction{	AGMCORE_screen exch pop exch pop	dup type /dicttype eq{		dup /HalftoneType get 1 eq{			/SpotFunction get		}{			dup /HalftoneType get 2 eq{				/GraySpotFunction get			}{ 				pop				{					abs exch abs 2 copy add 1 gt{						1 sub dup mul exch 1 sub dup mul add 1 sub					}{						dup mul exch dup mul add 1 exch sub					}ifelse				}bind			}ifelse		}ifelse	}if} def/clp_npth{	clip newpath} def/eoclp_npth{	eoclip newpath} def/stkpath_clp_npth{	strokepath clip newpath} def/stk_n_clp_npth{	gsave stroke grestore clip newpath} def/npth_clp{	newpath clip} def/graphic_setup{	/AGMCORE_graphicsave save def	concat	0 setgray	0 setlinecap	0 setlinejoin	1 setlinewidth	[] 0 setdash	10 setmiterlimit	newpath	false setoverprint	false setstrokeadjust	Adobe_AGM_Core/spot_alias get exec	/Adobe_AGM_Image where {		pop		Adobe_AGM_Image/spot_alias 2 copy known{			get exec		}{			pop pop		}ifelse	} if	100 dict begin	/showpage {} def	mark} def/graphic_cleanup{	cleartomark	end	AGMCORE_graphicsave restore} def/compose_error_msg{	grestoreall initgraphics		/Helvetica findfont 10 scalefont setfont		/AGMCORE_deltaY 100 def	/AGMCORE_deltaX 310 def				clippath pathbbox newpath pop pop 36 add exch 36 add exch moveto	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath	0 AGMCORE_&setgray	gsave 1 AGMCORE_&setgray fill grestore 	1 setlinewidth gsave stroke grestore			currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto		/AGMCORE_deltaY 12 def	/AGMCORE_tmp 0 def	AGMCORE_err_strings exch get		{		dup 32 eq			{			pop			AGMCORE_str256 0 AGMCORE_tmp getinterval			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt				{				currentpoint AGMCORE_deltaY sub exch pop				clippath pathbbox pop pop pop 44 add exch moveto				} if			AGMCORE_str256 0 AGMCORE_tmp getinterval show ( ) show						0 1 AGMCORE_str256 length 1 sub				{				AGMCORE_str256 exch 0 put				}for			/AGMCORE_tmp 0 def			}			{				AGMCORE_str256 exch AGMCORE_tmp exch put				/AGMCORE_tmp AGMCORE_tmp 1 add def			} ifelse		} forall} bdf/doc_setup{	Adobe_AGM_Core begin		/AGMCORE_will_host_separate xdf	/AGMCORE_ps_version xdf	/AGMCORE_ps_level xdf		errordict /AGM_handleerror known not{		errordict /AGM_handleerror errordict /handleerror get put		errordict /handleerror {			Adobe_AGM_Core begin			$error /newerror get AGMCORE_cur_err null ne and{				$error /newerror false put				AGMCORE_cur_err compose_error_msg			}if			$error /newerror true put			end			errordict /AGM_handleerror get exec			} bind put		}if			/AGMCORE_environ_ok 		ps_level AGMCORE_ps_level ge		ps_version AGMCORE_ps_version ge and 		AGMCORE_ps_level -1 eq or	def		AGMCORE_environ_ok not		{/AGMCORE_cur_err /AGMCORE_bad_environ def} if		/AGMCORE_&setgray systemdict/setgray get def	level2{		/AGMCORE_&setcolor systemdict/setcolor get def		/AGMCORE_&setcolorspace systemdict/setcolorspace get def	}if	/AGMCORE_distilling		/product where{			pop systemdict/setdistillerparams known product (Adobe PostScript Parser) ne and		}{			false		}ifelse	def	/AGMCORE_in_rip_sep		/AGMCORE_in_rip_sep where{			pop AGMCORE_in_rip_sep		}{			AGMCORE_distilling 			{				false			}{				userdict/Adobe_AGM_OnHost_Seps known{					false				}{					level2{						currentpagedevice/Separations 2 copy known{							get						}{							pop pop false						}ifelse					}{						false					}ifelse				}ifelse			}ifelse		}ifelse	def	level2 not{		/xput{			dup load dup length exch maxlength eq{				dup dup load dup				length dup 0 eq {pop 1} if 2 mul dict copy def			}if			load begin				def 			end		}def	}{		/xput{			load 3 1 roll put		}def	}ifelse	/AGMCORE_GSTATE AGMCORE_key_known not{		/AGMCORE_GSTATE 21 dict def		/AGMCORE_gstack 32 array def		/AGMCORE_gstackptr 0 def		/AGMCORE_gstacksaveptr 0 def		/AGMCORE_gstackframekeys 8 def													/AGMCORE_&gsave /gsave ldf		/AGMCORE_&grestore /grestore ldf		/AGMCORE_&grestoreall /grestoreall ldf		/AGMCORE_&save /save ldf		/AGMCORE_gdictcopy {			begin			{ def } forall			end		}def		/AGMCORE_gput {			AGMCORE_gstack AGMCORE_gstackptr get			3 1 roll			put		}def		/AGMCORE_gget {			AGMCORE_gstack AGMCORE_gstackptr get			exch			get		}def		/gsave {			AGMCORE_&gsave			AGMCORE_gstack AGMCORE_gstackptr get			AGMCORE_gstackptr 1 add			dup 32 ge {limitcheck} if			Adobe_AGM_Core exch			/AGMCORE_gstackptr exch put			AGMCORE_gstack AGMCORE_gstackptr get			AGMCORE_gdictcopy		}def		/grestore {			AGMCORE_&grestore			AGMCORE_gstackptr 1 sub			dup AGMCORE_gstacksaveptr lt {1 add} if			Adobe_AGM_Core exch			/AGMCORE_gstackptr exch put		}def		/grestoreall {			AGMCORE_&grestoreall			Adobe_AGM_Core			/AGMCORE_gstackptr AGMCORE_gstacksaveptr put 		}def		/save {			AGMCORE_&save			AGMCORE_gstack AGMCORE_gstackptr get			AGMCORE_gstackptr 1 add			dup 32 ge {limitcheck} if			Adobe_AGM_Core begin				/AGMCORE_gstackptr exch def				/AGMCORE_gstacksaveptr AGMCORE_gstackptr def			end			AGMCORE_gstack AGMCORE_gstackptr get			AGMCORE_gdictcopy		}def		0 1 AGMCORE_gstack length 1 sub {				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put		} for	}if	/currentcmykcolor [0 0 0 0] AGMCORE_gput	/currentstrokeadjust false AGMCORE_gput	/currentcolorspace [/DeviceGray] AGMCORE_gput	/sep_tint 0 AGMCORE_gput	/sep_colorspace_dict null AGMCORE_gput	/indexed_colorspace_dict null AGMCORE_gput	/currentcolor_intent () AGMCORE_gput	/customcolor_tint 1 AGMCORE_gput	end}def/page_setup{	/setcmykcolor where{		pop		Adobe_AGM_Core/AGMCORE_&setcmykcolor /setcmykcolor load put	}if	Adobe_AGM_Core begin	/setcmykcolor	{		4 copy AGMCORE_cmykbuf astore /currentcmykcolor exch AGMCORE_gput		1 sub 4 1 roll		3 {			3 index add neg dup 0 lt {				pop 0			} if			3 1 roll		} repeat		setrgbcolor pop	}ndf	/currentcmykcolor	{		/currentcmykcolor AGMCORE_gget aload pop	}ndf	/setoverprint	{		pop	}ndf	/currentoverprint	{		false	}ndf	/AGMCORE_deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt def	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def	/AGMCORE_plate_ndx 		AGMCORE_cyan_plate{ 			0		}{			AGMCORE_magenta_plate{				1			}{				AGMCORE_yellow_plate{					2				}{					AGMCORE_black_plate{						3					}{						4					}ifelse				}ifelse			}ifelse		}ifelse		def	/AGMCORE_composite_job		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def		/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def		/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def		/AGM_preserve_spots 		/AGM_preserve_spots where{			pop AGM_preserve_spots		}{			AGMCORE_distilling AGMCORE_producing_seps or		}ifelse	def	/AGM_is_distiller_preserving_spotimages	{		currentdistillerparams/PreserveOverprintSettings known		{			currentdistillerparams/PreserveOverprintSettings get				{					currentdistillerparams/ColorConversionStrategy known					{						currentdistillerparams/ColorConversionStrategy get						/LeaveColorUnchanged eq					}{						true					}ifelse				}{					false				}ifelse		}{			false		}ifelse	}def	/convert_spot_to_process where {pop}{		/convert_spot_to_process		{			dup dup (None) eq exch (All) eq or				{				pop false				}{				AGMCORE_host_sep				{ 					gsave					1 0 0 0 setcmykcolor currentgray 1 exch sub					0 1 0 0 setcmykcolor currentgray 1 exch sub					0 0 1 0 setcmykcolor currentgray 1 exch sub					0 0 0 1 setcmykcolor currentgray 1 exch sub					add add add 0 eq					{						pop false					}{						false setoverprint						1 1 1 1 5 -1 roll findcmykcustomcolor 1 setcustomcolor						currentgray 0 eq					}ifelse					grestore				}{					AGMCORE_distilling					{						pop AGM_is_distiller_preserving_spotimages not					}{						Adobe_AGM_Core/AGMCORE_name xddf						false						currentpagedevice/OverrideSeparations known							{							currentpagedevice/OverrideSeparations get								{								/HqnSpots /ProcSet resourcestatus									{									pop pop pop true									}if								}if							}if												{							AGMCORE_name /HqnSpots /ProcSet findresource /TestSpot get exec not							}{							gsave							[/Separation AGMCORE_name /DeviceGray {}]setcolorspace							false							currentpagedevice/SeparationColorNames 2 copy known							{								get								{ AGMCORE_name eq or}forall							not							}{								pop pop pop true							}ifelse							grestore						}ifelse					}ifelse				}ifelse			}ifelse		}def	}ifelse	/convert_to_process where {pop}{		/convert_to_process		{			dup length 0 eq				{				pop false				}{				AGMCORE_host_sep				{ 				true exch					{					convert_spot_to_process and					}				forall				}{				false exch					{					convert_spot_to_process or					}				forall				}ifelse			}ifelse		}def	}ifelse		AGMCORE_host_sep AGMCORE_will_host_separate not and {		/AGMCORE_cur_err /AGMCORE_color_space_onhost_seps def		AGMCORE_color_space_onhost_seps	}if	/AGMCORE_avoid_L2_sep_space  		version cvr 2012 lt 		level2 and 		AGMCORE_producing_seps not and	def	/AGMCORE_is_cmyk_sep		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or	def	/AGM_avoid_0_cmyk where{		pop AGM_avoid_0_cmyk	}{		AGM_preserve_spots 		userdict/Adobe_AGM_OnHost_Seps known 		userdict/Adobe_AGM_InRip_Seps known or		not and	}ifelse	{		/setcmykcolor[			{				4 copy add add add 0 eq currentoverprint and{					pop 0.0005				}if			}/exec cvx			/AGMCORE_&setcmykcolor load dup type/operatortype ne{				/exec cvx			}if		]cvx def	}if	AGMCORE_host_sep{		/AGMCORE_get_ink_data			AGMCORE_cyan_plate{				{pop pop pop}			}{			  	AGMCORE_magenta_plate{			  		{4 3 roll pop pop pop}			  	}{			  		AGMCORE_yellow_plate{			  			{4 2 roll pop pop pop}			  		}{			  			{4 1 roll pop pop pop}			  		}ifelse			  	}ifelse			}ifelse		def		/clip AGMCORE_key_known not{			Adobe_AGM_Core/AGMCORE_&clip /clip load put			/clip			{				current_spot_alias{					currentdict/InksUsed known{						[						InksUsed{							dup map_alias{								/Name get exch pop							}if						}forall						]						/InksUsed xdf					}if				}if				AGMCORE_&clip			}def		}if		/eoclip AGMCORE_key_known not{			Adobe_AGM_Core/AGMCORE_&eoclip /eoclip load put			/eoclip			{				current_spot_alias{					currentdict/InksUsed known{						[						InksUsed{							dup map_alias{								/Name get exch pop							}if						}forall						]						/InksUsed xdf					}if				}if				AGMCORE_&eoclip			}def		}if	}if	AGMCORE_in_rip_sep{		/setcustomcolor		{			exch aload pop			dup 7 1 roll inRip_spot_has_ink not	{ 				4 {4 index mul 4 1 roll}				repeat				/DeviceCMYK setcolorspace				6 -2 roll pop pop			}{ 				Adobe_AGM_Core begin					/AGMCORE_k xdf /AGMCORE_y xdf /AGMCORE_m xdf /AGMCORE_c xdf				end				[/Separation 4 -1 roll /DeviceCMYK				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}				]				setcolorspace			}ifelse			setcolor		}ndf		/setseparationgray		{			[/Separation (All) /DeviceGray {}] setcolorspace_opt			1 exch sub setcolor		}ndf	}{		/setseparationgray		{			AGMCORE_&setgray		}ndf	}ifelse	/findcmykcustomcolor	{		5 makereadonlyarray	}ndf	/setcustomcolor	{		exch aload pop pop		4 {4 index mul 4 1 roll} repeat		setcmykcolor pop	}ndf		/has_color		/colorimage where{			AGMCORE_producing_seps{				pop true			}{				systemdict eq			}ifelse		}{			false		}ifelse	def		/map_index	{		1 index mul exch getinterval {255 div} forall	}def		level2{		/mo /moveto ldf		/li /lineto ldf		/cv /curveto ldf		/knockout_unitsq		{			1 setgray			0 0 1 1 rectfill		}def		/level2ScreenFreq{			begin			60			HalftoneType 1 eq{				pop Frequency			}if			HalftoneType 2 eq{				pop GrayFrequency			}if			HalftoneType 5 eq{				pop Default level2ScreenFreq			}if			 end		}def		/currentScreenFreq{			currenthalftone level2ScreenFreq		}def		level2 /setcolorspace AGMCORE_key_known not and{					/AGMCORE_&&&setcolorspace /setcolorspace ldf			/AGMCORE_ReplaceMappedColor			{				dup type dup /arraytype eq exch /packedarraytype eq or				{					dup 0 get dup /Separation eq					{						pop						dup length array copy						dup dup 1 get						current_spot_alias						{							dup map_alias							{								begin								/sep_colorspace_dict currentdict AGMCORE_gput								pop pop	pop																	[ 									/Separation Name 									CSA map_csa									dup /MappedCSA xdf 									/sep_colorspace_proc load								]								dup Name								end							}if						}if						map_reserved_ink_name 1 exch put					}{						/DeviceN eq 						{							dup length array copy							dup dup 1 get [ 								exch {									current_spot_alias{										dup map_alias{											/Name get exch pop										}if									}if									map_reserved_ink_name								} forall 							] 1 exch put						}if					}ifelse				}if			}def			/setcolorspace			{				dup type dup /arraytype eq exch /packedarraytype eq or				{					dup 0 get /Indexed eq					{						AGMCORE_distilling						{							/PhotoshopDuotoneList where							{								pop false							}{								true							}ifelse						}{							true						}ifelse						{							aload pop 3 -1 roll							AGMCORE_ReplaceMappedColor							3 1 roll 4 array astore						}if					}{						AGMCORE_ReplaceMappedColor					}ifelse				}if				AGMCORE_&&&setcolorspace			}def		}if		}{				/adj		{			currentstrokeadjust{				transform				0.25 sub round 0.25 add exch				0.25 sub round 0.25 add exch				itransform			}if		}def		/mo{			adj moveto		}def		/li{			adj lineto		}def		/cv{			6 2 roll adj			6 2 roll adj			6 2 roll adj curveto		}def		/knockout_unitsq		{			1 setgray			8 8 1 [8 0 0 8 0 0] {<ffffffffffffffff>} image		}def		/currentstrokeadjust{			/currentstrokeadjust AGMCORE_gget		}def		/setstrokeadjust{			/currentstrokeadjust exch AGMCORE_gput		}def		/currentScreenFreq{			currentscreen pop pop		}def		/setcolorspace		{			/currentcolorspace exch AGMCORE_gput		} def				/currentcolorspace		{			/currentcolorspace AGMCORE_gget		} def				/n_color_components		{			dup type /arraytype eq{				0 get			}if			dup /DeviceGray eq{				pop 1			}{				/DeviceCMYK eq{					4				}{					3				}ifelse			}ifelse		} def				/setcolor_devicecolor		{			dup type /arraytype eq{				0 get			}if			dup /DeviceGray eq{				pop setgray			}{				/DeviceCMYK eq{					setcmykcolor				}{					setrgbcolor				}ifelse			}ifelse		}def			/setcolor		{			currentcolorspace 0 get			dup /DeviceGray ne{				dup /DeviceCMYK ne{					dup /DeviceRGB ne{						dup /Separation eq{							pop							currentcolorspace 3 get exec							currentcolorspace 2 get						}{							dup /Indexed eq{								pop								currentcolorspace 3 get dup type /stringtype eq{									currentcolorspace 1 get n_color_components									3 -1 roll map_index								}{									exec								}ifelse								currentcolorspace 1 get							}{								/AGMCORE_cur_err /AGMCORE_invalid_color_space def								AGMCORE_invalid_color_space							}ifelse						}ifelse					}if				}if			}if			setcolor_devicecolor		} def	}ifelse		/sop /setoverprint ldf	/lw /setlinewidth ldf	/lc /setlinecap ldf	/lj /setlinejoin ldf	/ml /setmiterlimit ldf	/dsh /setdash ldf	/sadj /setstrokeadjust ldf	/gry /setgray ldf	/rgb /setrgbcolor ldf	/cmyk /setcmykcolor ldf	/sep /setsepcolor ldf	/idx /setindexedcolor ldf	/colr /setcolor ldf	/csacrd /set_csa_crd ldf	/sepcs /setsepcolorspace ldf	/idxcs /setindexedcolorspace ldf	/cp /closepath ldf	/clp /clp_npth ldf	/eclp /eoclp_npth ldf	/spclp /stkpath_clp_npth ldf	/f /fill ldf	/ef /eofill ldf	/s /stroke ldf	/sclp /stk_n_clp_npth ldf	/nclp /npth_clp ldf	/gset /graphic_setup ldf	/gcln /graphic_cleanup ldf		currentdict{		dup xcheck 1 index type dup /arraytype eq exch /packedarraytype eq or and {			bind		}if		def	}forall}def/page_trailer{	end}def/doc_trailer{}defsystemdict /findcolorrendering known{	/findcolorrendering systemdict /findcolorrendering get def}ifsystemdict /setcolorrendering known{	/setcolorrendering systemdict /setcolorrendering get def}if/test_cmyk_color_plate{	gsave	setcmykcolor currentgray 1 ne	grestore}def/inRip_spot_has_ink{	dup Adobe_AGM_Core/AGMCORE_name xddf	convert_spot_to_process not}def/current_ink{	dup length 0 eq{		pop true	}{		Adobe_AGM_Core/ink_result false put		{			dup /ProcessCyan eq{				AGMCORE_cyan_plate ink_result or Adobe_AGM_Core/ink_result xddf			}{				dup /ProcessMagenta eq{					AGMCORE_magenta_plate ink_result or Adobe_AGM_Core/ink_result xddf				}{					dup /ProcessYellow eq{						AGMCORE_yellow_plate ink_result or Adobe_AGM_Core/ink_result xddf					}{						dup /ProcessBlack eq{							AGMCORE_black_plate ink_result or Adobe_AGM_Core/ink_result xddf						}{							dup /sep_colorspace_dict AGMCORE_gget dup null eq{								pop false ink_result or Adobe_AGM_Core/ink_result xddf							}{								/Name get eq{									1 setsepcolor									currentgray 1 ne ink_result or Adobe_AGM_Core/ink_result xddf								}{									false ink_result or Adobe_AGM_Core/ink_result xddf								}ifelse							}ifelse						}ifelse					}ifelse				}ifelse			}ifelse			pop 		} forall		ink_result	}ifelse}def/map255_to_range{	1 index sub	3 -1 roll 255 div mul add}def/set_csa_crd{	/sep_colorspace_dict null AGMCORE_gput	begin		CSA map_csa setcolorspace_opt		set_crd	end}def/setsepcolor{ 		/sep_colorspace_dict AGMCORE_gget begin		dup /sep_tint exch AGMCORE_gput		TintProc	end} def/sep_colorspace_proc{	Adobe_AGM_Core/AGMCORE_tmp xddf	/sep_colorspace_dict AGMCORE_gget begin	currentdict/Components known{		Components aload pop 		TintMethod/Lab eq{			2 {AGMCORE_tmp mul NComponents 1 roll} repeat			LMax sub AGMCORE_tmp mul LMax add  NComponents 1 roll		}{			TintMethod/Subtractive eq{				NComponents{					AGMCORE_tmp mul NComponents 1 roll				}repeat			}{				NComponents{					1 sub AGMCORE_tmp mul 1 add  NComponents 1 roll				} repeat			}ifelse		}ifelse	}{		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get		aload pop	}ifelse	end} def/sep_colorspace_gray_proc{	Adobe_AGM_Core/AGMCORE_tmp xddf	/sep_colorspace_dict AGMCORE_gget begin	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get	end} def/sep_proc_name{	dup 0 get 	dup /DeviceRGB eq exch /DeviceCMYK eq or level2 not and has_color not and{		pop [/DeviceGray]		/sep_colorspace_gray_proc	}{		/sep_colorspace_proc	}ifelse} def/setsepcolorspace{ 		current_spot_alias{		dup begin			Name map_alias{				exch pop			}if		end	}if	dup /sep_colorspace_dict exch AGMCORE_gput	begin	/MappedCSA CSA map_csa def	Adobe_AGM_Core/AGMCORE_sep_special Name dup () eq exch (All) eq or ddf		AGMCORE_avoid_L2_sep_space{		[/Indexed MappedCSA sep_proc_name 255 exch 			{ 255 div } /exec cvx 3 -1 roll [ 4 1 roll load /exec cvx ] cvx 		] setcolorspace_opt		/TintProc {			255 mul round cvi setcolor		}bdf	}{		MappedCSA 0 get /DeviceCMYK eq 		currentdict/Components known and 		AGMCORE_sep_special not and{			/TintProc [				Components aload pop Name findcmykcustomcolor 				/exch cvx /setcustomcolor cvx			] cvx bdf		}{ 			AGMCORE_host_sep Name (All) eq and{ 				/TintProc { 					1 exch sub setseparationgray 				}bdf 			}{				AGMCORE_in_rip_sep MappedCSA 0 get /DeviceCMYK eq and 				AGMCORE_host_sep or				Name () eq and{					/TintProc [						MappedCSA sep_proc_name exch 0 get /DeviceCMYK eq{							cvx /setcmykcolor cvx						}{							cvx /setgray cvx						}ifelse					] cvx bdf				}{					AGMCORE_producing_seps MappedCSA 0 get dup /DeviceCMYK eq exch /DeviceGray eq or and AGMCORE_sep_special not and{	 					/TintProc [							/dup cvx							MappedCSA sep_proc_name cvx exch							0 get /DeviceGray eq{								1 /exch cvx /sub cvx 0 0 0 4 -1 /roll cvx							}if							/Name cvx /findcmykcustomcolor cvx /exch cvx														AGMCORE_host_sep{								AGMCORE_is_cmyk_sep							}{								Name inRip_spot_has_ink not							}ifelse							{		 						/pop cvx 1							}if							/setcustomcolor cvx						] cvx bdf 					}{ 						/TintProc /setcolor ldf												[/Separation Name MappedCSA sep_proc_name load ] setcolorspace_opt					}ifelse				}ifelse			}ifelse		}ifelse	}ifelse	set_crd	setsepcolor	end} def/setindexedcolorspace{	dup /indexed_colorspace_dict exch AGMCORE_gput	begin		/MappedCSA CSA map_csa def		AGMCORE_host_sep level2 not and{			0 0 0 0 setcmykcolor		}{			[/Indexed MappedCSA 			level2 not has_color not and{				dup 0 get dup /DeviceRGB eq exch /DeviceCMYK eq or{					pop [/DeviceGray]				}if				HiVal GrayLookup			}{				HiVal 				currentdict/RangeArray known{					{ 						/indexed_colorspace_dict AGMCORE_gget begin						Lookup exch 						dup HiVal gt{							pop HiVal						}if						NComponents mul NComponents getinterval {} forall						NComponents 1 sub -1 0{							RangeArray exch 2 mul 2 getinterval aload pop map255_to_range							NComponents 1 roll						}for						end					} bind				}{					Lookup				}ifelse			}ifelse			] setcolorspace_opt						set_crd		}ifelse	end}def/setindexedcolor{	AGMCORE_host_sep{		/indexed_colorspace_dict AGMCORE_gget/Lookup get 4 3 -1 roll map_index setcmykcolor	}{		setcolor	}ifelse} def/ignoreimagedata{	currentoverprint not{		gsave 		dup begin		1 setgray		0 0 ImageMatrix itransform 		Width Height ImageMatrix idtransform rectfill 		end		grestore		}if	consumeimagedata}def/add_csa{	Adobe_AGM_Core begin			/AGMCORE_CSA_cache xput	end}def/map_csa{	dup type /nametype eq{		Adobe_AGM_Core/AGMCORE_CSA_cache get exch get	}if}def/add_csd{	Adobe_AGM_Core begin		/AGMCORE_CSD_cache xput	end}def/get_csd{	dup type /nametype eq{		Adobe_AGM_Core/AGMCORE_CSD_cache get exch get	}if}def/get_csd_by_name{	dup type dup /nametype eq exch /stringtype eq or{		Adobe_AGM_Core begin		/AGMCORE_CSD_Name xdf		AGMCORE_CSD_cache		{			dup /Name get AGMCORE_CSD_Name eq			{				exch pop exit			}{				pop			}ifelse			pop		}forall		end	}if}def/cachepattern_level2{	4 dict begin	/comparebuffer exch def	/holdbuffer exch def	/readbuffer 1024 string def	/LZWFilter holdbuffer /LZWEncode filter def	{		currentfile readbuffer readline not			{pop exit}		if		dup LZWFilter exch writestring		LZWFilter (\n) writestring		comparebuffer eq			{exit}		if	}loop	LZWFilter closefile	end}def/cachepattern_level3{	3 dict begin	/comparebuffer exch def	/readbuffer 1024 string def	/DoEOL false def	{ 		DoEOL			{			(\n)			/DoEOL false def			}			{			currentfile readbuffer readline not				{pop ()}				{				dup length 0 eq					{ pop(\n)}					{					dup comparebuffer eq						{pop ()}						{/DoEOL true def}					ifelse					}				ifelse				}			ifelse			}		ifelse	} /ReusableStreamDecode filter	end}def/add_pattern{	Adobe_AGM_Core begin		/AGMCORE_pattern_cache xput	end}def/get_pattern{	dup type /nametype eq{		Adobe_AGM_Core/AGMCORE_pattern_cache get exch get	}if}def/make_pattern{	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform	exch 3 index /XStep get 1 index exch 2 copy div cvi mul sub sub	exch 3 index /YStep get 1 index exch 2 copy div cvi mul sub sub	matrix translate exch matrix concatmatrix	makepattern}def/set_pattern{	dup /PatternType get 1 eq{		dup /PaintType get 1 eq{			false sop [/DeviceGray] setcolorspace 0 setgray		}if	}if	setpattern}def/setcolorspace_opt{	dup currentcolorspace eq{		pop	}{		setcolorspace	}ifelse}def/updatecolorrendering{		currentcolorrendering/Intent known{		currentcolorrendering/Intent get	}{		null	}ifelse		Intent ne{		false  		Intent		AGMCORE_CRD_cache {			exch pop 			begin				dup Intent eq{					currentdict setcolorrendering_opt					end 					exch pop true exch						exit				}if			end		} forall		pop		not{			systemdict /findcolorrendering known{				Intent findcolorrendering pop				/ColorRendering findresource 				dup length dict copy				setcolorrendering_opt			}if		}if	}if} def/add_crd{	AGMCORE_CRD_cache 3 1 roll put}def/set_crd{	AGMCORE_host_sep not level2 and{		currentdict/CRD known{			AGMCORE_CRD_cache CRD get dup null ne{				setcolorrendering_opt			}{				pop			}ifelse		}{			currentdict/Intent known{				updatecolorrendering			}if		}ifelse	}if}def/setcolorrendering_opt{	dup currentcolorrendering eq{		pop	}{		begin			/Intent Intent def			currentdict		end		setcolorrendering	}ifelse}def/cdndf{	exch dup currentdict exch known{		pop pop	}{		exch def	}ifelse}def/cpaint_gcomp{	convert_to_process Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf	Adobe_AGM_Core/AGMCORE_ConvertToProcess get not	{		(%end_cpaint_gcomp) flushinput	}if}def/cpaint_gsep{	Adobe_AGM_Core/AGMCORE_ConvertToProcess get	{			(%end_cpaint_gsep) flushinput	}if}def/cpaint_gend{	newpath}def/AGMCORE_ctm_stack bdict	/push_ctm {		stack length size le{			stack dup length 2 mul array 			dup /stack exch def			copy pop		}if		stack size 3 -1 roll put		/size size 1 add def	}	/pop_ctm {		/size size 1 sub def		size 0 lt{ 			/size 0 def		}if		stack size get	}	/stack 1 array	/size 0 edict def/save_ctm{	matrix currentmatrix AGMCORE_ctm_stack begin 		push_ctm 	end}def/restore_ctm{	AGMCORE_ctm_stack begin		pop_ctm 	end	setmatrix}def/path_rez{	dup 0 ne{		AGMCORE_deviceDPI exch div 		dup 1 lt{			pop 1		}if		setflat	}{		pop	}ifelse 	}def/rdcmntline {	currentfile AGMCORE_str256 readline pop	(%) anchorsearch {pop} if} def/set_spot_alias_ary{	/AGMCORE_SpotAliasAry where{		pop pop	}{		Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf		true set_spot_alias	}ifelse}def/set_spot_alias{	/AGMCORE_SpotAliasAry where{		/AGMCORE_current_spot_alias 3 -1 roll put	}{		pop	}ifelse}def/current_spot_alias{	/AGMCORE_SpotAliasAry where{		/AGMCORE_current_spot_alias get	}{		false	}ifelse}def/map_alias{	/AGMCORE_SpotAliasAry where{		begin			/AGMCORE_name xdf			false				AGMCORE_SpotAliasAry{				dup/Name get AGMCORE_name eq{					save exch					/Adobe_AGM_Core currentdict def					/CSD get get_csd					exch restore					exch pop true					exit				}{					pop				}ifelse			}forall		end	}{		pop false	}ifelse}bdf/spot_alias{	true set_spot_alias		/AGMCORE_&setcustomcolor AGMCORE_key_known not {		Adobe_AGM_Core/AGMCORE_&setcustomcolor /setcustomcolor load put	} if	/customcolor_tint 1 AGMCORE_gput		Adobe_AGM_Core begin	/setcustomcolor	{				dup /customcolor_tint exch AGMCORE_gput				current_spot_alias{			1 index 4 get map_alias{				mark 3 1 roll				setsepcolorspace				counttomark 0 ne{					setsepcolor				}if				pop				pop			}{				AGMCORE_&setcustomcolor			}ifelse		}{			AGMCORE_&setcustomcolor		}ifelse	}bdf	end}def/begin_feature{	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if}def/end_feature{	2 dict begin	/spd /setpagedevice load def	/setpagedevice { get_gstate spd set_gstate } def	stopped{$error/newerror false put}if	end	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if}def/set_negative{	Adobe_AGM_Core begin	/AGMCORE_inverting exch def	level2{		currentpagedevice/NegativePrint known{			currentpagedevice/NegativePrint get Adobe_AGM_Core/AGMCORE_inverting get ne{				true begin_feature true{						bdict /NegativePrint Adobe_AGM_Core/AGMCORE_inverting get edict setpagedevice				}end_feature			}if			/AGMCORE_inverting false def		}if	}if	AGMCORE_inverting{		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer		gsave newpath clippath 1 /setseparationgray where{pop setseparationgray}{setgray}ifelse 		fill grestore	}if	end}def/lw_save_restore_override {	/md where {		pop		md begin		/pmSVsetup{} def		/endp{}def		/pse{}def		/psb{}def		/orig_showpage where			{pop}			{/orig_showpage /showpage load def}		ifelse		/showpage {orig_showpage gR} def		end	}if}def/pscript_showpage_override {	/NTPSOct95 where	{		begin		showpage		save		/showpage /restore load def		/restore {exch pop}def		end	}if}def/driver_media_override{	/md where {		pop		md /initializepage known {			md /initializepage {} put		} if		md /rC known {			md /rC {4{pop}repeat} put		} if	}if		Adobe_AGM_Core /AGMCORE_Default_CTM matrix currentmatrix put}def/driver_check_media_override{	Adobe_AGM_Core /AGMCORE_Default_CTM get matrix currentmatrix ne	{		Adobe_AGM_Core /AGMCORE_Default_CTM get setmatrix	}if}defAGMCORE_err_strings begin	/AGMCORE_bad_environ (Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. ) def	/AGMCORE_color_space_onhost_seps (This job contains colors that will not separate with on-host methods. ) def	/AGMCORE_invalid_color_space (This job contains an invalid color space. ) defendendsystemdict /setpacking known{	setpacking} if%%EndResource%%BeginResource: procset Adobe_CoolType_Core 2.12 0%%Copyright: Copyright 1997-2001 Adobe Systems Incorporated.  All Rights Reserved.%%Version: 2.12 0userdict/Adobe_CoolType_Core 60 dict dup begin put/Level2? systemdict/languagelevel known dup{pop systemdict/languagelevel get 2 ge}if def Level2?not{/currentglobal false def/setglobal/pop load def/gcheck{pop false}bind def/currentpacking false def/setpacking/pop load def/SharedFontDirectory 0 dictdef}if currentpacking true setpacking/@_SaveStackLevels{Adobe_CoolType_Databegin @opStackCountByLevel @opStackLevel 2 copy known not{2 copy 3 dict dup/args 7 index 5 add array put put get}{get dup/args get dup length 3 index lt{dup length 5 add array exch 1 index exch 0 exch putinterval 1 index exch/argsexch put}{pop}ifelse}ifelse begin count 2 sub 1 index lt{pop count 1 sub}ifdup/argCount exch def dup 0 gt{exch 1 index 2 add 1 roll args exch 0 exchgetinterval astore pop}{pop}ifelse count 1 sub/restCount exch def end/@opStackLevel @opStackLevel 1 add def countdictstack 1 sub@dictStackCountByLevel exch @dictStackLevel exch put/@dictStackLevel@dictStackLevel 1 add def end}bind def/@_RestoreStackLevels{Adobe_CoolType_Data begin/@opStackLevel @opStackLevel 1 sub def@opStackCountByLevel @opStackLevel get begin count restCount sub dup 0 gt{{pop}repeat}{pop}ifelse args 0 argCount getinterval{}forall end/@dictStackLevel@dictStackLevel 1 sub def @dictStackCountByLevel @dictStackLevel get endcountdictstack exch sub dup 0 gt{{end}repeat}{pop}ifelse}bind def/@_PopStackLevels{Adobe_CoolType_Data begin/@opStackLevel @opStackLevel 1 subdef/@dictStackLevel @dictStackLevel 1 sub def end}bind def/@Raise{exch cvxexch errordict exch get exec stop}bind def/@ReRaise{cvx $error/errorname geterrordict exch get exec stop}bind def/@Stopped{0 @#Stopped}bind def/@#Stopped{@_SaveStackLevels stopped{@_RestoreStackLevels true}{@_PopStackLevels false}ifelse}bind def/@Arg{Adobe_CoolType_Data begin @opStackCountByLevel@opStackLevel 1 sub get/args get exch get end}bind def/doc_setup{Adobe_CoolType_Core begin/mov/moveto load def/nfnt/newencodedfont load def/mfnt/makefont load def/sfnt/setfont load def/ufnt/undefinefont load def/chp/charpath load def/awsh/awidthshow load def/wsh/widthshow load def/ash/ashowload def/sh/show load def end userdict/Adobe_CoolType_Data 6 dict dup begin/AddWidths? false def/CC 0 def/charcode 2 string def/@opStackCountByLevel 32dict def/@opStackLevel 0 def/@dictStackCountByLevel 32 dict def/@dictStackLevel 0 def end put}bind def/doc_trailer{currentdictAdobe_CoolType_Core eq{end}if}bind def/page_setup{Adobe_CoolType_Core begin}bind def/page_trailer{end}bind def/unload{systemdict/languagelevel known{systemdict/languagelevel get 2 ge{userdict/Adobe_CoolType_Core 2 copy known{undef}{pop pop}ifelse}if}if}bind def/ndf{1 index where{pop pop pop}{dup xcheck{bind}if def}ifelse}def/findfont dup systemdict begin userdict begin/globaldict where{/globaldict get begin}if dup where pop exch get/globaldictwhere{pop end}if end end def/systemfindfont/findfont load def/undefinefont{pop}ndf/copyfont{currentglobal 3 1 roll 1 index gcheck setglobal dup null eq{0}{dup length}ifelse 2 index length add 1 add dict begin exch{1 index/FID eq{poppop}{def}ifelse}forall dup null eq{pop}{{def}forall}ifelse currentdict endexch setglobal}bind def/copyarray{currentglobal exch dup gcheck setglobal duplength array copy exch setglobal}bind def/newencodedfont{currentglobal{SharedFontDirectory 3 index known{SharedFontDirectory 3 index get/FontReferenced known}{false}ifelse}{FontDirectory 3 index known{FontDirectory3 index get/FontReferenced known}{SharedFontDirectory 3 index known{SharedFontDirectory 3 index get/FontReferenced known}{false}ifelse}ifelse}ifelse dup{3 index findfont/FontReferenced get 2 index findfont ne{pop false}if}if{pop 1 index findfont/Encoding get exch 0 1 255{2 copy get 3 index 3 1roll put}for pop pop pop}{findfont dup dup maxlength 2 add dict begin exch{1index/FID ne{def}{pop pop}ifelse}forall/FontReferenced exch def/Encoding exchdup length array copy def/FontName 1 index dup type/stringtype eq{cvn}if defcurrentdict end definefont pop}ifelse}bind def/SetSubstituteStrategy{$SubstituteFont begin dup type/dicttype ne{0 dict}if currentdict/$Strategiesknown{exch $Strategies exch 2 copy known{get 2 copy maxlength exch maxlengthadd dict begin{def}forall{def}forall currentdict dup/$Init known{dup/$Init getexec}if end/$Strategy exch def}{pop pop pop}ifelse}{pop pop}ifelse end}binddef/scff{$SubstituteFont begin dup type/stringtype eq{dup length exch}{null}ifelse/$sname exch def/$slen exch def end{findfont}@Stopped{dup length dup 21add string dup 4 3 roll 0 exch 128 string cvs putinterval exch 1 index exch(_was-malformed-so-was)putinterval cvn{findfont}@Stopped{pop/Courier findfont}if}if $SubstituteFont begin/$sname null def/$slen 0 def end}bind def/isWidthsOnlyFont{dup/WidthsOnly known{pop pop true}{dup/FDepVector known{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}{dup/FDArray known{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}{pop}ifelse}ifelse}ifelse}bind def/?set{$SubstituteFont begin/$substituteFound false def/$fontname 4index def/$doSmartSub false def end 3 index findfont $SubstituteFont begin$substituteFound{false}{dup/FontName known{dup/FontName get $fontname eq 1index/DistillerFauxFont known not and/currentdistillerparams where{pop false 2index isWidthsOnlyFont not and}if}{false}ifelse}ifelse exch pop/$doSmartSubtrue def end{exch pop exch pop exch 2 dict dup/Found 3 index put exch findfontexch}{exch exec exch findfont 2 dict dup/Downloaded 6 5 roll put}ifelse dup/FontName 4 index put copyfont definefont pop}bind def/?str1 256 string def/?str2 256 string def/?add{1 index type/integertype eq{exch true 4 2}{false 31}ifelse roll 1 index findfont dup/Widths known{Adobe_CoolType_Data/AddWidths?true put gsave dup 1000 scalefont setfont}if/Downloaded known{exec exch{exch?str2 cvs exch findfont/Downloaded get 1 dict begin/Downloaded 1 index def?str1 cvs length ?str1 1 index 1 add 3 index putinterval exch length 1 add 1index add ?str1 2 index(*)putinterval ?str1 0 2 index getinterval cvn findfont?str1 3 index(+)putinterval 2 dict dup/FontName ?str1 0 6 index getintervalcvn put dup/Downloaded Downloaded put end copyfont dup/FontName get exchdefinefont pop pop pop}{pop}ifelse}{pop exch{findfont dup/Found get dup lengthexch ?str1 cvs pop ?str1 1 index(+)putinterval ?str1 1 index 1 add 4 index?str2 cvs putinterval ?str1 exch 0 exch 5 4 roll ?str2 cvs length 1 add addgetinterval cvn 1 dict exch 1 index exch/FontName exch put copyfont dup/FontName get exch definefont pop}{pop}ifelse}ifelse Adobe_CoolType_Data/AddWidths? get{grestore Adobe_CoolType_Data/AddWidths? false put}if}bind def/?sh{currentfont/Downloaded known{exch}if pop}bind def/?chp{currentfont/Downloaded known{pop}{false chp}ifelse}bind def/?mv{currentfont/Downloadedknown{moveto pop pop}{pop pop moveto}ifelse}bind def setpacking userdict/$SubstituteFont 25 dict put 1 dict begin/SubstituteFont dup $error exch 2copy known{get}{pop pop{pop/Courier}bind}ifelse def/currentdistillerparamswhere dup{pop pop currentdistillerparams/CannotEmbedFontPolicy 2 copy known{get/Error eq}{pop pop false}ifelse}if not{countdictstack array dictstack 0 getbegin userdict begin $SubstituteFont begin/$str 128 string def/$fontpat 128string def/$slen 0 def/$sname null def/$match false def/$fontname null def/$substituteFound false def/$doSmartSub true def/$depth 0 def/$fontname nulldef/$italicangle 26.5 def/$dstack null def/$Strategies 10 dict dup begin/$Type3Underprint{currentglobal exch false setglobal 11 dict begin/UseFontexch $WMode 0 ne{dup length dict copy dup/WMode $WMode put/UseFont exchdefinefont}if def/FontName $fontname dup type/stringtype eq{cvn}if def/FontType 3 def/FontMatrix[.001 0 0 .001 0 0]def/Encoding 256 array dup 0 1255{/.notdef put dup}for pop def/FontBBox[0 0 0 0]def/CCInfo 7 dict dup begin/cc null def/x 0 def/y 0 def end def/BuildChar{exch begin CCInfo begin 1string dup 0 3 index put exch pop/cc exch def UseFont 1000 scalefont setfontcc stringwidth/y exch def/x exch def x y setcharwidth $SubstituteFont/$Strategy get/$Underprint get exec 0 0 moveto cc show x y moveto end end}binddef currentdict end exch setglobal}bind def/$GetaTint 2 dict dup begin/$BuildFont{dup/WMode known{dup/WMode get}{0}ifelse/$WMode exch def $fontnameexch dup/FontName known{dup/FontName get dup type/stringtype eq{cvn}if}{/unnamedfont}ifelse exch $deepcopyfont exch 1 index exch/FontBasedOn exch putdup/FontName $fontname dup type/stringtype eq{cvn}if put definefont}bind def/$Underprint{gsave x abs y abs gt{/y 1000 def}{/x -1000 def 500 120 translate}ifelse Level2?{[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]setcolorspace}{0setgray}ifelse 10 setlinewidth x .8 mul[7 3]{y mul 8 div 120 sub x 10 div exchmoveto 0 y 4 div neg rlineto dup 0 rlineto 0 y 4 div rlineto closepath gsaveLevel2?{.2 setcolor}{.8 setgray}ifelse fill grestore stroke}forall popgrestore}bind def end def/$Oblique 1 dict dup begin/$BuildFont{currentglobalexch dup gcheck setglobal null copyfont begin/FontBasedOn currentdict/FontNameknown{FontName dup type/stringtype eq{cvn}if}{/unnamedfont}ifelse def/FontName$fontname dup type/stringtype eq{cvn}if def/currentdistillerparams where{pop}{/FontInfo currentdict/FontInfo known{FontInfo null copyfont}{2 dict}ifelse dupbegin/ItalicAngle $italicangle def/FontMatrix FontMatrix[1 0 ItalicAngle dupsin exch cos div 1 0 0]matrix concatmatrix readonly end 4 2 roll def def}ifelse FontName currentdict end definefont exch setglobal}bind def end def/$None 1 dict dup begin/$BuildFont{}bind def end def end def/$ObliqueSetSubstituteStrategy/$findfontByEnum{dup type/stringtype eq{cvn}if dup/$fontname exch def $sname null eq{$str cvs dup length $slen sub $slengetinterval}{pop $sname}ifelse $fontpat dup 0(fonts/*)putinterval exch 7 exchputinterval/$match false def $SubstituteFont/$dstack countdictstack arraydictstack put mark{$fontpat 0 $slen 7 add getinterval{/$match exch def exit}$str filenameforall}stopped{cleardictstack currentdict true $SubstituteFont/$dstack get{exch{1 index eq{pop false}{true}ifelse}{begin false}ifelse}forallpop}if cleartomark/$slen 0 def $match false ne{$match(fonts/)anchorsearch poppop cvn}{/Courier}ifelse}bind def/$ROS 1 dict dup begin/Adobe 4 dict dup begin/Japan1[/Ryumin-Light/HeiseiMin-W3/GothicBBB-Medium/HeiseiKakuGo-W5/HeiseiMaruGo-W4/Jun101-Light]def/Korea1[/HYSMyeongJo-Medium/HYGoThic-Medium]def/GB1[/STSong-Light/STHeiti-Regular]def/CNS1[/MKai-Medium/MHei-Medium]defend def end def/$cmapname null def/$deepcopyfont{dup/FontType get 0 eq{1 dictdup/FontName/copied put copyfont begin/FDepVector FDepVector copyarray 0 1 2index length 1 sub{2 copy get $deepcopyfont dup/FontName/copied put/copiedexch definefont 3 copy put pop pop}for def currentdict end}{$Strategies/$Type3Underprint get exec}ifelse}bind def/$buildfontname{length $str 1 index(-)putinterval 1 add $str 1 index $cmapname $fontpat cvs putinterval $cmapnamelength add $str exch 0 exch getinterval cvn}bind def/$findfontByROS{/$fontnameexch def $ROS Registry 2 copy known{get Ordering 2 copy known{get}{pop pop[]}ifelse}{pop pop[]}ifelse false exch{dup/CIDFont resourcestatus{pop pop save 1index/CIDFont findresource dup/WidthsOnly known{dup/WidthsOnly get}{false}ifelse exch pop exch restore{pop}{exch pop true exit}ifelse}{pop}ifelse}forall{$str cvs $buildfontname}{false(*){save exch dup/CIDFont findresource dup/WidthsOnly known{dup/WidthsOnly get not}{true}ifelse exch/CIDSystemInfo getdup/Registry get Registry eq exch/Ordering get Ordering eq and and{exchrestore exch pop true exit}{pop restore}ifelse}$str/CIDFont resourceforall{$buildfontname}{$fontname $findfontByEnum}ifelse}ifelse}bind def end endcurrentdict/$error known currentdict/languagelevel known and dup{pop $error/SubstituteFont known}if dup{$error}{Adobe_CoolType_Core}ifelse begin{/SubstituteFont/CMap/Category resourcestatus{pop pop{$SubstituteFont begin/$substituteFound true def dup length $slen gt $sname null ne or $slen 0 gtand{$sname null eq{dup $str cvs dup length $slen sub $slen getinterval cvn}{$sname}ifelse dup/CMap resourcestatus{pop pop dup/$cmapname exch def/CMapfindresource/CIDSystemInfo get{def}forall $findfontByROS}{128 string cvs dup(-)search{3 1 roll search{3 1 roll pop{dup cvi}stopped{pop pop pop pop pop$findfontByEnum}{4 2 roll pop pop exch length exch 2 index length 2 index subexch 1 sub -1 0{$str cvs dup length 4 index 0 4 index 4 3 roll add getintervalexch 1 index exch 3 index exch putinterval dup/CMap resourcestatus{pop pop 4 1roll pop pop pop dup/$cmapname exch def/CMap findresource/CIDSystemInfo get{def}forall $findfontByROS true exit}{pop}ifelse}for dup type/booleantype eq{pop}{pop pop $findfontByEnum}ifelse}ifelse}{pop pop pop $findfontByEnum}ifelse}{pop pop $findfontByEnum}ifelse}ifelse}{//SubstituteFont exec}ifelse/$slen 0def end}}{{$SubstituteFont begin/$substituteFound true def dup length $slen gt$sname null ne or $slen 0 gt and{$findfontByEnum}{//SubstituteFont exec}ifelseend}}ifelse bind readonly def Adobe_CoolType_Core/scfindfont/systemfindfontload put}{/scfindfont{$SubstituteFont begin dup systemfindfont dup/FontNameknown{dup/FontName get dup 3 index ne}{/noname true}ifelse dup{/$origfontnamefound 2 index def/$origfontname 4 index def/$substituteFoundtrue def}if exch pop{$slen 0 gt $sname null ne 3 index length $slen gt or and{pop dup $findfontByEnum findfont dup maxlength 1 add dict begin{1 index/FID eq{pop pop}{def}ifelse}forall currentdict end definefont dup/FontName known{dup/FontName get}{null}ifelse $origfontnamefound ne{$origfontname $str cvs print( substitution revised, using )print dup/FontName known{dup/FontName get}{(unspecified font)}ifelse $str cvs print(.)print}if}{exch pop}ifelse}{exch pop}ifelse end}bind def}ifelse end endAdobe_CoolType_Core/findfont{$SubstituteFont begin $depth 0 eq{/$fontname 1index dup type/stringtype ne{$str cvs}if def/$substituteFound false def}if/$depth $depth 1 add def end scfindfont $SubstituteFont begin/$depth $depth 1sub def $substituteFound $depth 0 eq and $doSmartSub and{currentdict/$Strategyknown{$Strategy/$BuildFont get exec}if}if end}bind put}if end end%%EndResource%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.13 0%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated.%%Version: 1.13 0systemdict/languagelevel known dup{currentglobal false setglobal}{false}ifelseexch userdict/Adobe_CoolType_Utility 2 copy known{2 copy get dup maxlength 25add dict copy}{25 dict}ifelse put Adobe_CoolType_Utility begin/ct_Level2? exchdef/ct_Clone? 1183615869 internaldict dup/CCRun known not exch/eCCRun knownnot ct_Level2? and or def/ct_UseNativeCapability? systemdict/composefont knowndef/ct_MakeOCF 35 dict def/ct_Vars 25 dict def/ct_GlyphDirProcs 6 dict def/ct_BuildCharDict 15 dict dup begin/charcode 2 string def/dst_string 1500string def/nullstring()def/usewidths? true def end def ct_Level2?{setglobal}{pop}ifelse ct_GlyphDirProcs begin/GetGlyphDirectory{systemdict/languagelevelknown{pop/CIDFont findresource/GlyphDirectory get}{1 index/CIDFontfindresource/GlyphDirectory get dup type/dicttype eq{dup dup maxlength exchlength sub 2 index lt{dup length 2 index add dict copy 2 index/CIDFontfindresource/GlyphDirectory 2 index put}if}if exch pop exch pop}ifelse +}def/+{systemdict/languagelevel known{currentglobal false setglobal 3 dict begin/vmexch def}{1 dict begin}ifelse/$ exch def systemdict/languagelevel known{vmsetglobal/gvm currentglobal def $ gcheck setglobal}if ?{$ begin}if}def/?{$type/dicttype eq}def/|{userdict/Adobe_CoolType_Data known{Adobe_CoolType_Data/AddWidths? known{currentdict Adobe_CoolType_Data begin begin AddWidths?{Adobe_CoolType_Data/CC 3 index put ?{def}{$ 3 1 roll put}ifelse CC charcodeexch 1 index 0 2 index 256 idiv put 1 index exch 1 exch 256 mod putstringwidth 2 array astore currentfont/Widths get exch CC exch put}{?{def}{$ 31 roll put}ifelse}ifelse end end}{?{def}{$ 3 1 roll put}ifelse}ifelse}{?{def}{$ 3 1 roll put}ifelse}ifelse}def/!{?{end}if systemdict/languagelevel known{gvmsetglobal}if end}def/:{string currentfile exch readstring pop}executeonly defend ct_MakeOCF begin/ct_cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def/ct_CID_STR_SIZE 8000 def/ct_mkocfStr100 100 string def/ct_defaultFontMtx[.0010 0 .001 0 0]def/ct_1000Mtx[1000 0 0 1000 0 0]def/ct_raise{exch cvx excherrordict exch get exec stop}bind def/ct_reraise{cvx $error/errorname get(Error: )print dup(                    )cvs print errordict exch get exec stop}bind def/ct_cvnsi{1 index add 1 sub 1 exch 0 4 1 roll{2 index exch get exch 8bitshift add}for exch pop}bind def/ct_GetInterval{Adobe_CoolType_Utility/ct_BuildCharDict get begin/dst_index 0 def dup dst_string length gt{dupstring/dst_string exch def}if 1 index ct_CID_STR_SIZE idiv/arrayIndex exch def2 index arrayIndex get 2 index arrayIndex ct_CID_STR_SIZE mul sub{dup 3 indexadd 2 index length le{2 index getinterval dst_string dst_index 2 indexputinterval length dst_index add/dst_index exch def exit}{1 index length 1index sub dup 4 1 roll getinterval dst_string dst_index 2 index putintervalpop dup dst_index add/dst_index exch def sub/arrayIndex arrayIndex 1 add def 2index dup length arrayIndex gt{arrayIndex get}{pop exit}ifelse 0}ifelse}looppop pop pop dst_string 0 dst_index getinterval end}bind def ct_Level2?{/ct_resourcestatus currentglobal mark true setglobal{/unknowninstancename/Category resourcestatus}stopped{cleartomark setglobal true}{cleartomarkcurrentglobal not exch setglobal}ifelse{{mark 3 1 roll/Category findresourcebegin ct_Vars/vm currentglobal put({ResourceStatus} stopped)0()/SubFileDecodefilter cvx exec{cleartomark false}{{3 2 roll pop true}{cleartomark false}ifelse}ifelse ct_Vars/vm get setglobal end}}{{resourcestatus}}ifelse bind def/CIDFont/Category ct_resourcestatus{pop pop}{currentglobal true setglobal/Generic/Category findresource dup length dict copy dup/InstanceType/dicttypeput/CIDFont exch/Category defineresource pop setglobal}ifelsect_UseNativeCapability?{/CIDInit/ProcSet findresource begin 12 dict beginbegincmap/CIDSystemInfo 3 dict dup begin/Registry(Adobe)def/Ordering(Identity)def/Supplement 0 def end def/CMapName/Identity-H def/CMapVersion 1 def/CMapType 1 def 1 begincodespacerange<0000><ffff>endcodespacerange 1begincidrange<0000><ffff>0 endcidrange endcmap CMapName currentdict/CMapdefineresource pop end end}if}{/ct_Category 2 dict begin/CIDFont 10 dict def/ProcSet 2 dict def currentdict end def/defineresource{ct_Category 1 index 2copy known{get dup dup maxlength exch length eq{dup length 10 add dict copyct_Category 2 index 2 index put}if 3 index 3 index put pop exch pop}{pop pop/defineresource/undefined ct_raise}ifelse}bind def/findresource{ct_Category 1index 2 copy known{get 2 index 2 copy known{get 3 1 roll pop pop}{pop pop/findresource/undefinedresource ct_raise}ifelse}{pop pop/findresource/undefined ct_raise}ifelse}bind def/resourcestatus{ct_Category 1 index 2 copyknown{get 2 index known exch pop exch pop{0 -1 true}{false}ifelse}{pop pop/findresource/undefined ct_raise}ifelse}bind def/ct_resourcestatus/resourcestatus load def}ifelse/ct_CIDInit 2 dict begin/ct_cidfont_stream_init{{dup(Binary)eq{pop null currentfile ct_Level2?{{cid_BYTE_COUNT()/SubFileDecode filter}stopped{pop pop pop}if}if/readstring load exit}if dup(Hex)eq{pop currentfile ct_Level2?{{null exch/ASCIIHexDecode filter/readstring}stopped{pop exch pop(>)exch/readhexstring}if}{(>)exch/readhexstring}ifelseload exit}if/StartData/typecheck ct_raise}loop cid_BYTE_COUNT ct_CID_STR_SIZEle{2 copy cid_BYTE_COUNT string exch exec pop 1 array dup 3 -1 roll 0 exch put}{cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi dup array exch 2 sub 0 exch 1exch{2 copy 5 index ct_CID_STR_SIZE string 6 index exec pop put pop}for 2index cid_BYTE_COUNT ct_CID_STR_SIZE mod string 3 index exec pop 1 index exch1 index length 1 sub exch put}ifelse cid_CIDFONT exch/GlyphData exch put 2index null eq{pop pop pop}{pop/readstring load 1 string exch{3 copy exec popdup length 0 eq{pop pop pop pop pop true exit}if 4 index eq{pop pop pop popfalse exit}if}loop pop}ifelse}bind def/StartData{mark{currentdict dup/FDArrayget 0 get/FontMatrix get 0 get .001 eq{dup/CDevProc known not{/CDevProc1183615869 internaldict/stdCDevProc 2 copy known{get}{pop pop{pop pop pop poppop 0 -1000 7 index 2 div 880}}ifelse def}if}{/CDevProc{pop pop pop pop pop 01 cid_temp/cid_CIDFONT get/FDArray get 0 get/FontMatrix get 0 get div 7 index2 div 1 index .88 mul}def}ifelse/cid_temp 15 dict def cid_temp begin/cid_CIDFONT exch def 3 copy pop dup/cid_BYTE_COUNT exch def 0 gt{ct_cidfont_stream_init FDArray{/Private get dup/SubrMapOffset known{begin/Subrs SubrCount array def Subrs SubrMapOffset SubrCount SDBytes ct_Level2?{currentdict dup/SubrMapOffset undef dup/SubrCount undef/SDBytes undef}if end/cid_SD_BYTES exch def/cid_SUBR_COUNT exch def/cid_SUBR_MAP_OFFSET exch def/cid_SUBRS exch def cid_SUBR_COUNT 0 gt{GlyphData cid_SUBR_MAP_OFFSETcid_SD_BYTES ct_GetInterval 0 cid_SD_BYTES ct_cvnsi 0 1 cid_SUBR_COUNT 1 sub{exch 1 index 1 add cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add GlyphData exchcid_SD_BYTES ct_GetInterval 0 cid_SD_BYTES ct_cvnsi cid_SUBRS 4 2 rollGlyphData exch 4 index 1 index sub ct_GetInterval dup length string copy put}for pop}if}{pop}ifelse}forall}if cleartomark pop pop end CIDFontNamecurrentdict/CIDFont defineresource pop end end}stopped{cleartomark/StartDatact_reraise}if}bind def currentdict end def/ct_saveCIDInit{/CIDInit/ProcSetct_resourcestatus{true}{/CIDInitC/ProcSet ct_resourcestatus}ifelse{pop pop/CIDInit/ProcSet findresource ct_UseNativeCapability?{pop null}{/CIDInitct_CIDInit/ProcSet defineresource pop}ifelse}{/CIDInit ct_CIDInit/ProcSetdefineresource pop null}ifelse ct_Vars exch/ct_oldCIDInit exch put}bind def/ct_restoreCIDInit{ct_Vars/ct_oldCIDInit get dup null ne{/CIDInit exch/ProcSetdefineresource pop}{pop}ifelse}bind def/ct_BuildCharSetUp{1 index beginCIDFont begin Adobe_CoolType_Utility/ct_BuildCharDict get begin/ct_dfCharCodeexch def/ct_dfDict exch def CIDFirstByte ct_dfCharCode add dup CIDCount ge{pop0}if/cid exch def{GlyphDirectory cid 2 copy known{get}{pop pop nullstring}ifelse dup length FDBytes sub 0 gt{dup FDBytes 0 ne{0 FDBytes ct_cvnsi}{pop 0}ifelse/fdIndex exch def dup length FDBytes sub FDBytes exch getinterval/charstring exch def exit}{pop cid 0 eq{/charstring nullstring def exit}if/cid0 def}ifelse}loop}def/ct_SetCacheDevice{0 0 moveto dup stringwidth 3 -1 rolltrue charpath pathbbox 0 -1000 7 index 2 div 880 setcachedevice2 0 0 moveto}def/ct_CloneSetCacheProc{1 eq{stringwidth pop -2 div -880 0 -1000 setcharwidthmoveto}{usewidths?{currentfont/Widths get cid 2 copy known{get exch pop aloadpop}{pop pop stringwidth}ifelse}{stringwidth}ifelse setcharwidth 0 0 moveto}ifelse}def/ct_Type3ShowCharString{ct_FDDict fdIndex 2 copy known{get}{currentglobal 3 1 roll 1 index gcheck setglobal ct_Type1FontTemplate dupmaxlength dict copy begin FDArray fdIndex get dup/FontMatrix 2 copy known{get}{pop pop ct_defaultFontMtx}ifelse/FontMatrix exch dup length array copy def/Private get/Private exch def/Widths rootfont/Widths get def/CharStrings 1dict dup/.notdef<d841272cf18f54fc13>dup length string copy put def currentdictend/ct_Type1Font exch definefont dup 5 1 roll put setglobal}ifelse dup/CharStrings get 1 index/Encoding get ct_dfCharCode get charstring putrootfont/WMode 2 copy known{get}{pop pop 0}ifelse exch 1000 scalefont setfontct_str1 0 ct_dfCharCode put ct_str1 exch ct_dfSetCacheProc ct_SyntheticBold{currentpoint ct_str1 show newpath moveto ct_str1 true charpath ct_StrokeWidthsetlinewidth stroke}{ct_str1 show}ifelse}def/ct_Type4ShowCharString{ct_dfDictct_dfCharCode charstring FDArray fdIndex get dup/FontMatrix get dupct_defaultFontMtx ct_matrixeq not{ct_1000Mtx matrix concatmatrix concat}{pop}ifelse/Private get Adobe_CoolType_Utility/ct_Level2? get not{ct_dfDict/Private3 -1 roll{put}1183615869 internaldict/superexec get exec}if 1183615869internaldict Adobe_CoolType_Utility/ct_Level2? get{1 index}{3 index/Privateget mark 6 1 roll}ifelse dup/RunInt known{/RunInt get}{pop/CCRun}ifelse getexec Adobe_CoolType_Utility/ct_Level2? get not{cleartomark}if}bind def/ct_BuildCharIncremental{{Adobe_CoolType_Utility/ct_MakeOCF get beginct_BuildCharSetUp ct_ShowCharString}stopped{stop}if end end end end}bind def/BaseFontNameStr(BF00)def/ct_Type1FontTemplate 14 dict begin/FontType 1 def/FontMatrix[.001 0 0 .001 0 0]def/FontBBox[-250 -250 1250 1250]def/Encodingct_cHexEncoding def/PaintType 0 def currentdict end def/BaseFontTemplate 11dict begin/FontMatrix[.001 0 0 .001 0 0]def/FontBBox[-250 -250 1250 1250]def/Encoding ct_cHexEncoding def/BuildChar/ct_BuildCharIncremental load defct_Clone?{/FontType 3 def/ct_ShowCharString/ct_Type3ShowCharString load def/ct_dfSetCacheProc/ct_CloneSetCacheProc load def/ct_SyntheticBold false def/ct_StrokeWidth 1 def}{/FontType 4 def/Private 1 dict dup/lenIV 4 put def/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def/PaintType 0 def/ct_ShowCharString/ct_Type4ShowCharString load def}ifelse/ct_str1 1 string defcurrentdict end def/BaseFontDictSize BaseFontTemplate length 5 add def/ct_matrixeq{true 0 1 5{dup 4 index exch get exch 3 index exch get eq and dupnot{exit}if}for exch pop exch pop}bind def/ct_makeocf{15 dict begin exch/WModeexch def exch/FontName exch def/FontType 0 def/FMapType 2 def/FontMatrixmatrix def/bfCount 1 index/CIDCount get 256 idiv 1 add dup 256 gt{pop 256}ifdef/Encoding 256 array 0 1 bfCount 1 sub{2 copy dup put pop}for bfCount 1 255{2 copy bfCount put pop}for def/FDepVector bfCount dup 256 lt{1 add}if arraydef BaseFontTemplate BaseFontDictSize dict copy begin/CIDFont exch def CIDFont/FontBBox known{CIDFont/FontBBox get/FontBBox exch def}if CIDFont/CDevProcknown{CIDFont/CDevProc get/CDevProc exch def}if currentdict endBaseFontNameStr 3(0)putinterval 0 1 bfCount dup 256 eq{1 sub}if{FDepVectorexch 2 index BaseFontDictSize dict copy begin dup/CIDFirstByte exch 256 muldef FontType 3 eq{/ct_FDDict 2 dict def}if currentdict end 1 index 16BaseFontNameStr 2 2 getinterval cvrs pop BaseFontNameStr exch definefont put}for ct_Clone?{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}if FontName currentdict end definefont ct_Clone?{gsave dup 1000 scalefontsetfont ct_BuildCharDict begin/usewidths? false def currentfont/Widths getbegin exch/CIDFont get/GlyphDirectory get{pop dup charcode exch 1 index 0 2index 256 idiv put 1 index exch 1 exch 256 mod put stringwidth 2 array astoredef}forall end/usewidths? true def end grestore}{exch pop}ifelse}bind def/ct_ComposeFont{ct_UseNativeCapability?{2 index/CMap ct_resourcestatus{pop popexch pop}{/CIDInit/ProcSet findresource begin 12 dict begin begincmap/CMapName3 index def/CMapVersion 1 def/CMapType 1 def exch/WMode exch def/CIDSystemInfo3 dict dup begin/Registry(Adobe)def/Ordering CMapName ct_mkocfStr100 cvs(Adobe-)search{pop pop(-)search{dup length string copy exch pop exch pop}{pop(Identity)}ifelse}{pop(Identity)}ifelse def/Supplement 0 def end def 1begincodespacerange<0000><ffff>endcodespacerange 1 begincidrange<0000><ffff>0endcidrange endcmap CMapName currentdict/CMap defineresource pop end end}ifelse composefont}{3 2 roll pop 0 get/CIDFont findresource ct_makeocf}ifelse}bind def/ct_MakeIdentity{ct_UseNativeCapability?{1 index/CMapct_resourcestatus{pop pop}{/CIDInit/ProcSet findresource begin 12 dict beginbegincmap/CMapName 2 index def/CMapVersion 1 def/CMapType 1 def/CIDSystemInfo3 dict dup begin/Registry(Adobe)def/Ordering CMapName ct_mkocfStr100 cvs(Adobe-)search{pop pop(-)search{dup length string copy exch pop exch pop}{pop(Identity)}ifelse}{pop(Identity)}ifelse def/Supplement 0 def end def 1begincodespacerange<0000><ffff>endcodespacerange 1 begincidrange<0000><ffff>0endcidrange endcmap CMapName currentdict/CMap defineresource pop end end}ifelse composefont}{exch pop 0 get/CIDFont findresource ct_makeocf}ifelse}binddef currentdict readonly pop end end%%EndResourceAdobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0%%Version: 1.0 0%%Copyright: Copyright (C) 2000-2000 Adobe Systems, Inc.  All Rights Reserved.systemdict /setpacking known{	currentpacking	true setpacking} ifuserdict /Adobe_AGM_Image 65 dict dup begin put/Adobe_AGM_Image_Id /Adobe_AGM_Image_1.0_0 def/nd{	null def}bind def/AGMIMG_&image nd/AGMIMG_&colorimage nd%%don't initialize AGMIMG_&customcolorimage, it wrecks havoc in a nested environment%%AGMIMG_ccimage_exists not {/AGMIMG_&customcolorimage nd} if /AGMIMG_&imagemask nd/AGMIMG_mbuf () def/AGMIMG_ybuf () def/AGMIMG_kbuf () def/AGMIMG_c 0 def/AGMIMG_m 0 def/AGMIMG_y 0 def/AGMIMG_k 0 def/AGMIMG_tmp nd/AGMIMG_imagestring0 nd/AGMIMG_imagestring1 nd/AGMIMG_imagestring2 nd/AGMIMG_imagestring3 nd/AGMIMG_imagestring4 nd/AGMIMG_imagestring5 nd/AGMIMG_cnt nd/AGMIMG_fsave nd/AGMIMG_colorAry nd/AGMIMG_override nd/AGMIMG_name nd/invert_image_samples nd/knockout_image_samples	nd/img nd/sepimg nd/idximg nd/doc_setup{ 	Adobe_AGM_Core begin	Adobe_AGM_Image begin	/AGMIMG_&image systemdict/image get def	/AGMIMG_&imagemask systemdict/imagemask get def	/colorimage where{		pop		/AGMIMG_&colorimage /colorimage ldf	}if	end	end}def/page_setup{	Adobe_AGM_Image begin	/AGMIMG_ccimage_exists {/customcolorimage where 		{			pop			/Adobe_AGM_OnHost_Seps where			{			pop false			}{			/Adobe_AGM_InRip_Seps where				{				pop false				}{					true				 }ifelse			 }ifelse			}{			false		}ifelse 	}bdf	level2{		/invert_image_samples		{			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf			/Decode [ Decode 1 get Decode 0 get] def		}def		/knockout_image_samples		{			Operator/imagemask ne{				/Decode [1 1] def			}if		}def	}{			/invert_image_samples		{			{1 exch sub} currenttransfer addprocs settransfer		}def		/knockout_image_samples		{			{ pop 1 } currenttransfer addprocs settransfer		}def	}ifelse	/img /imageormask ldf	/sepimg /sep_imageormask ldf	/idximg /indexed_imageormask ldf	currentdict{		dup xcheck 1 index type dup /arraytype eq exch /packedarraytype eq or and{			bind		}if		def	}forall}def/page_trailer{	end}def/doc_trailer{}def/imageormask_sys{	begin		save mark		level2{			currentdict			Operator /imagemask eq{				AGMIMG_&imagemask			}{				AGMIMG_&image			}ifelse		}{			Width Height			Operator /imagemask eq{				Decode 0 get 1 eq Decode 1 get 0 eq	and				ImageMatrix /DataSource load				AGMIMG_&imagemask			}{				BitsPerComponent ImageMatrix /DataSource load				AGMIMG_&image			}ifelse		}ifelse		cleartomark restore	end}def/overprint_plate{	currentoverprint{		0 get		dup /DeviceGray eq{			pop AGMCORE_black_plate not		}{			/DeviceCMYK eq{				AGMCORE_is_cmyk_sep not			}if		}ifelse	}{		false	}ifelse}def/imageormask{	begin		SkipImageProc not{			save mark			level2 AGMCORE_host_sep not and{				currentdict				Operator /imagemask eq{					imagemask				}{					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get /DeviceGray eq and{						[/Separation /Black /DeviceGray {}] setcolorspace						/Decode [ Decode 1 get Decode 0 get ] def					}if					image				}ifelse			}{				Width Height				Operator /imagemask eq{					Decode 0 get 1 eq Decode 1 get 0 eq	and					ImageMatrix /DataSource load					AGMCORE_host_sep{						currentgray 1 ne{							currentdict imageormask_sys						}{  	 						currentoverprint not{  			 					1 AGMCORE_&setgray  	 							knockout_image_samples  			 					currentdict imageormask_sys  			 				}{  			 					currentdict ignoreimagedata  			 				}ifelse				 		}ifelse					}{						imagemask					}ifelse				}{					BitsPerComponent ImageMatrix 					MultipleDataSources{						0 1 NComponents 1 sub{							DataSource exch get						}for					}{						/DataSource load					}ifelse					Operator /colorimage eq{						AGMCORE_host_sep{							MultipleDataSources level2 or NComponents 4 eq and{								MultipleDataSources{									4 {pop} repeat									/DataSource [										DataSource 0 get /exec cvx										DataSource 1 get /exec cvx										DataSource 2 get /exec cvx										DataSource 3 get /exec cvx										/AGMCORE_get_ink_data cvx									] cvx def								}{									/DataSource /DataSource load filter_cmyk 0 () /SubFileDecode filter def								}ifelse									/Decode [ Decode 0 get Decode 1 get ] def								/MultipleDataSources false def								/NComponents 1 def								/Operator /image def								AGMCORE_is_cmyk_sep{									currentoverprint InksUsed current_ink not and{										currentdict consumeimagedata									}{										invert_image_samples						 				1 AGMCORE_&setgray										currentdict imageormask_sys									}ifelse								}{										currentdict ignoreimagedata								}ifelse							}{																	MultipleDataSources NComponents AGMIMG_&colorimage													}ifelse						}{							true NComponents colorimage						}ifelse					}{						Operator /image eq{							AGMCORE_host_sep{								/DoImage true def								HostSepColorImage{									invert_image_samples								}{									AGMCORE_black_plate not{										/DoImage false def										currentdict ignoreimagedata					 				}if								}ifelse						 		1 AGMCORE_&setgray								DoImage									{currentdict imageormask_sys} if							}{								image							}ifelse						}{							Operator/knockout eq{								pop pop pop pop pop								currentoverprint InksUsed current_ink not and{								}{									currentcolorspace overprint_plate not{										knockout_unitsq									}if								}ifelse							}if						}ifelse					}ifelse				}ifelse			}ifelse			cleartomark restore		}if	end}def/sep_imageormask{ 	/sep_colorspace_dict AGMCORE_gget begin	/MappedCSA CSA map_csa def	begin	SkipImageProc not{		save mark 			AGMCORE_avoid_L2_sep_space{			/Decode [ Decode 0 get 255 mul Decode 1 get 255 mul ] def		}if 		AGMIMG_ccimage_exists 		MappedCSA 0 get /DeviceCMYK eq and		currentdict/Components known and 		Name () ne and 		Name (All) ne and 		Operator /image eq and		AGMCORE_producing_seps not and		level2 not and		{			Width Height BitsPerComponent ImageMatrix 			[			/DataSource load /exec cvx			{				0 1 2 index length 1 sub{					1 index exch					2 copy get 255 xor put				}for			} /exec cvx			] cvx bind			MappedCSA 0 get /DeviceCMYK eq{				Components aload pop			}{				0 0 0 Components aload pop 1 exch sub			}ifelse			Name findcmykcustomcolor			customcolorimage		}{			AGMCORE_producing_seps not{				level2{					AGMCORE_avoid_L2_sep_space not currentcolorspace 0 get /Separation ne and{						[/Separation Name MappedCSA sep_proc_name exch 0 get exch load ] setcolorspace_opt						/sep_tint AGMCORE_gget setcolor					}if					currentdict imageormask				}{ 					currentdict					Operator /imagemask eq{						imageormask					}{						sep_imageormask_lev1					}ifelse				}ifelse 			}{				AGMCORE_host_sep{					Operator/knockout eq{						currentoverprint InksUsed current_ink not and{						}{							currentdict/ImageMatrix get concat							knockout_unitsq						}ifelse					}{						currentgray 1 ne{ 							AGMCORE_is_cmyk_sep Name (All) ne and{ 								level2{	 								[ /Separation Name [/DeviceGray]	 								{ 	 									sep_colorspace_proc AGMCORE_get_ink_data										1 exch sub	 								} bind									] AGMCORE_&setcolorspace									/sep_tint AGMCORE_gget AGMCORE_&setcolor 									currentdict imageormask_sys	 							}{	 								currentdict									Operator /imagemask eq{										imageormask_sys									}{										sep_image_lev1_sep									}ifelse	 							}ifelse 							}{ 								Operator/imagemask ne{									invert_image_samples 								}if		 						currentdict imageormask_sys 							}ifelse 						}{							currentdict consumeimagedata  							currentoverprint not Name (All) eq or{								gsave 								knockout_unitsq								grestore		 					}if 						}ifelse		 			}ifelse 				}{					currentcolorspace 0 get /Separation ne{						[/Separation Name MappedCSA sep_proc_name exch 0 get exch load ] setcolorspace_opt						/sep_tint AGMCORE_gget setcolor					}if					currentoverprint 					MappedCSA 0 get /DeviceCMYK eq and 					Name inRip_spot_has_ink not and 					Name (All) ne and {						imageormask_l2_overprint					}{						currentdict imageormask 					}ifelse				}ifelse			}ifelse		}ifelse		cleartomark restore	}if	end	end}def/imageormask_l2_overprint{		currentdict	currentcmykcolor add add add 0 eq{		currentdict consumeimagedata	}{		level3{ 									currentcmykcolor 			/AGMIMG_k xdf 			/AGMIMG_y xdf 			/AGMIMG_m xdf 			/AGMIMG_c xdf			Operator/imagemask eq{				[/DeviceN [				AGMIMG_c 0 ne {/Cyan} if				AGMIMG_m 0 ne {/Magenta} if				AGMIMG_y 0 ne {/Yellow} if				AGMIMG_k 0 ne {/Black} if				] /DeviceCMYK {}] setcolorspace								AGMIMG_c 0 ne {AGMIMG_c} if				AGMIMG_m 0 ne {AGMIMG_m} if				AGMIMG_y 0 ne {AGMIMG_y} if				AGMIMG_k 0 ne {AGMIMG_k} if				setcolor						}{					/Decode [ Decode 0 get 255 mul Decode 1 get 255 mul ] def				[/Indexed 									[						/DeviceN [							AGMIMG_c 0 ne {/Cyan} if							AGMIMG_m 0 ne {/Magenta} if							AGMIMG_y 0 ne {/Yellow} if							AGMIMG_k 0 ne {/Black} if						] 						/DeviceCMYK {							AGMIMG_k 0 eq {0} if							AGMIMG_y 0 eq {0 exch} if							AGMIMG_m 0 eq {0 3 1 roll} if							AGMIMG_c 0 eq {0 4 1 roll} if												}					]					255					{						255 div 								mark exch						dup	dup dup														AGMIMG_k 0 ne{							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop									counttomark 1 roll						}{							pop						}ifelse													AGMIMG_y 0 ne{							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop									counttomark 1 roll						}{							pop						}ifelse								AGMIMG_m 0 ne{							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop									counttomark 1 roll						}{							pop						}ifelse													AGMIMG_c 0 ne{							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop									counttomark 1 roll						}{							pop						}ifelse						counttomark 1 add -1 roll pop					}				] setcolorspace			}ifelse						imageormask_sys		}{	write_image_file{		currentcmykcolor		0 ne{			[/Separation /Black /DeviceGray {}] setcolorspace			gsave			/Black			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {4 1 roll pop pop pop 1 exch sub} /exec cvx]			cvx modify_halftone_xfer			Operator currentdict read_image_file			grestore		}if		0 ne{			[/Separation /Yellow /DeviceGray {}] setcolorspace			gsave			/Yellow			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {4 2 roll pop pop pop 1 exch sub} /exec cvx]			cvx modify_halftone_xfer			Operator currentdict read_image_file			grestore		}if		0 ne{			[/Separation /Magenta /DeviceGray {}] setcolorspace			gsave			/Magenta			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {4 3 roll pop pop pop 1 exch sub} /exec cvx]			cvx modify_halftone_xfer			Operator currentdict read_image_file			grestore		}if		0 ne{			[/Separation /Cyan /DeviceGray {}] setcolorspace			gsave			/Cyan 			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {pop pop pop 1 exch sub} /exec cvx]			cvx modify_halftone_xfer			Operator currentdict read_image_file			grestore		} if				close_image_file			}{				imageormask			}ifelse		}ifelse	}ifelse} def/indexed_imageormask{	begin		save mark 	 		currentdict 		AGMCORE_host_sep{ 						Operator/knockout eq{				/indexed_colorspace_dict AGMCORE_gget /CSA get map_csa overprint_plate not{					knockout_unitsq				}if			}{	 			AGMCORE_is_cmyk_sep{					Operator /imagemask eq{						imageormask_sys					}{						level2{							indexed_image_lev2_sep						}{							indexed_image_lev1_sep						}ifelse					}ifelse				}{					currentoverprint not{						knockout_image_samples		 				imageormask_sys		 			}{		 				currentdict consumeimagedata		 			}ifelse				}ifelse			}ifelse 		}{			level2{				imageormask			}{ 				Operator /imagemask eq{					imageormask				}{					indexed_imageormask_lev1				}ifelse			}ifelse 		}ifelse		cleartomark restore	end}def/indexed_image_lev2_sep{	/indexed_colorspace_dict AGMCORE_gget begin	begin				currentcolorspace 		dup 1 /DeviceGray put		dup 3 [			currentcolorspace 3 get 			{				exch 4 mul 4 getinterval {} forall				AGMCORE_get_ink_data 255 div 1 exch sub			} /exec cvx		] cvx put		setcolorspace				currentdict 		Operator /imagemask eq{			AGMIMG_&imagemask		}{			AGMIMG_&image		}ifelse				end end}def/OPIimage{	dup type /dicttype ne{		10 dict begin			/DataSource xdf			/ImageMatrix xdf			/BitsPerComponent xdf			/Height xdf			/Width xdf			/ImageType 1 def			/Decode [0 1 def]			currentdict		end	}if	dup begin		/NComponents 1 cdndf		/MultipleDataSources false cdndf		/SkipImageProc {false} cdndf		/HostSepColorImage false cdndf		/Decode [				0 				currentcolorspace 0 get /Indexed eq{					2 BitsPerComponent exp 1 sub				}{					1				}ifelse		] cdndf		/Operator /image cdndf	end	/sep_colorspace_dict AGMCORE_gget null eq{		imageormask	}{		gsave		dup begin invert_image_samples end		sep_imageormask		grestore	}ifelse}def/spot_alias{	/mapto_sep_imageormask 	{		dup type /dicttype ne{			12 dict begin				/ImageType 1 def				/DataSource xdf				/ImageMatrix xdf				/BitsPerComponent xdf				/Height xdf				/Width xdf				/MultipleDataSources false def		}{			begin		}ifelse				/Decode [/customcolor_tint AGMCORE_gget 0] def				/Operator /image def				/HostSepColorImage false def				/InksUsed [] def				/SkipImageProc {false} def				currentdict 			end		sep_imageormask	}bdf	/customcolorimage	{		Adobe_AGM_Image/AGMIMG_colorAry xddf		/customcolor_tint AGMCORE_gget		bdict			/Name AGMIMG_colorAry 4 get			/CSA [ /DeviceCMYK ] 			/TintMethod /Subtractive			/TintProc null			/MappedCSA null			/NComponents 4 			/Components [ AGMIMG_colorAry aload pop pop ] 		edict		setsepcolorspace		mapto_sep_imageormask	}ndf	Adobe_AGM_Image/AGMIMG_&customcolorimage /customcolorimage load put	/customcolorimage	{		Adobe_AGM_Image/AGMIMG_override false put		dup 4 get map_alias{			/customcolor_tint AGMCORE_gget exch setsepcolorspace			pop			mapto_sep_imageormask		}{			AGMIMG_&customcolorimage		}ifelse				}bdf}deflevel2 not{	/colorbuf	{		0 1 2 index length 1 sub{			dup 2 index exch get 			255 exch sub 			2 index 			3 1 roll 			put		}for	}def	/tint_image_to_color	{		begin			Width Height BitsPerComponent ImageMatrix 			/DataSource load		end		Adobe_AGM_Image begin			/AGMIMG_mbuf 0 string def			/AGMIMG_ybuf 0 string def			/AGMIMG_kbuf 0 string def			{				colorbuf dup length AGMIMG_mbuf length ne					{					dup length dup dup					/AGMIMG_mbuf exch string def					/AGMIMG_ybuf exch string def					/AGMIMG_kbuf exch string def					} if				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop			}			addprocs			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf} true 4 colorimage			end	} def				/sep_imageormask_lev1	{		begin			MappedCSA 0 get dup /DeviceRGB eq exch /DeviceCMYK eq or has_color not and{								{					255 mul round cvi GrayLookup exch get				} currenttransfer addprocs settransfer				currentdict imageormask			}{				/sep_colorspace_dict AGMCORE_gget/Components known{					MappedCSA 0 get /DeviceCMYK eq{						Components aload pop					}{						0 0 0 Components aload pop 1 exch sub					}ifelse										Adobe_AGM_Image/AGMIMG_k xddf 					Adobe_AGM_Image/AGMIMG_y xddf 					Adobe_AGM_Image/AGMIMG_m xddf 					Adobe_AGM_Image/AGMIMG_c xddf 											AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{						{AGMIMG_k mul 1 exch sub} currenttransfer addprocs settransfer						currentdict imageormask					}{ 												currentcolortransfer						{AGMIMG_k mul 1 exch sub} exch addprocs 4 1 roll						{AGMIMG_y mul 1 exch sub} exch addprocs 4 1 roll						{AGMIMG_m mul 1 exch sub} exch addprocs 4 1 roll						{AGMIMG_c mul 1 exch sub} exch addprocs 4 1 roll						setcolortransfer						currentdict tint_image_to_color					}ifelse				}{										MappedCSA 0 get /DeviceGray eq {						{255 mul round cvi ColorLookup exch get 0 get} currenttransfer addprocs settransfer						currentdict imageormask					}{						MappedCSA 0 get /DeviceCMYK eq {							currentcolortransfer							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub} exch addprocs 4 1 roll							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub} exch addprocs 4 1 roll							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub} exch addprocs 4 1 roll							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub} exch addprocs 4 1 roll							setcolortransfer 							currentdict tint_image_to_color						}{ 							currentcolortransfer							{pop 1} exch addprocs 4 1 roll							{255 mul round cvi ColorLookup exch get 2 get} exch addprocs 4 1 roll							{255 mul round cvi ColorLookup exch get 1 get} exch addprocs 4 1 roll							{255 mul round cvi ColorLookup exch get 0 get} exch addprocs 4 1 roll							setcolortransfer 							currentdict tint_image_to_color						}ifelse					}ifelse				}ifelse			}ifelse		end	}def	/sep_image_lev1_sep	{		begin			/sep_colorspace_dict AGMCORE_gget/Components known{				Components aload pop								Adobe_AGM_Image/AGMIMG_k xddf 				Adobe_AGM_Image/AGMIMG_y xddf 				Adobe_AGM_Image/AGMIMG_m xddf 				Adobe_AGM_Image/AGMIMG_c xddf 									{AGMIMG_c mul 1 exch sub}				{AGMIMG_m mul 1 exch sub}				{AGMIMG_y mul 1 exch sub}				{AGMIMG_k mul 1 exch sub}			}{ 				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}			}ifelse						AGMCORE_get_ink_data currenttransfer addprocs settransfer						currentdict imageormask_sys						end	}def	/indexed_imageormask_lev1	{		/indexed_colorspace_dict AGMCORE_gget begin		begin			currentdict			MappedCSA 0 get dup /DeviceRGB eq exch /DeviceCMYK eq or has_color not and{								{HiVal mul round cvi GrayLookup exch get HiVal div} currenttransfer addprocs settransfer				imageormask			}{								MappedCSA 0 get /DeviceGray eq {					{HiVal mul round cvi Lookup exch get HiVal div} currenttransfer addprocs settransfer					imageormask				}{					MappedCSA 0 get /DeviceCMYK eq {						currentcolortransfer						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll						{4 mul HiVal mul round cvi       Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll						setcolortransfer 						tint_image_to_color					}{ 						currentcolortransfer						{pop 1} exch addprocs 4 1 roll						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div} exch addprocs 4 1 roll						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div} exch addprocs 4 1 roll						{3 mul HiVal mul round cvi 	   Lookup exch get HiVal div} exch addprocs 4 1 roll						setcolortransfer 						tint_image_to_color					}ifelse				}ifelse			}ifelse		end end	}def	/indexed_image_lev1_sep	{		/indexed_colorspace_dict AGMCORE_gget begin		begin			{4 mul HiVal mul round cvi       Lookup exch get HiVal div 1 exch sub}			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}						AGMCORE_get_ink_data currenttransfer addprocs settransfer						currentdict imageormask_sys						end end	}def}ifendsystemdict /setpacking known{	setpacking} if%%EndResource%ADOBeginClientInjection: DocumentProlog End "AI10"%ADOEndClientInjection: DocumentProlog End "AI10"currentdict Adobe_AGM_Utils eq {end} if%%EndProlog%%BeginSetup%ADOBeginClientInjection: DocumentSetup Start "AI10"%ADOEndClientInjection: DocumentSetup Start "AI10"Adobe_AGM_Utils begin2 2010 true Adobe_AGM_Core/doc_setup get execAdobe_CoolType_Core/doc_setup get execAdobe_AGM_Image/doc_setup get exec%ADOBeginClientInjection: DocumentSetup End "AI10"%ADOEndClientInjection: DocumentSetup End "AI10"currentdict Adobe_AGM_Utils eq {end} if%%EndSetup%%Page: SumPrinc.eps 1%%EndPageComments%%BeginPageSetup%ADOBeginClientInjection: PageSetup Start "AI10"%ADOEndClientInjection: PageSetup Start "AI10"Adobe_AGM_Utils beginAdobe_AGM_Core/page_setup get execAdobe_CoolType_Core/page_setup get execAdobe_AGM_Image/page_setup get exec%ADOBeginClientInjection: PageSetup End "AI10"%ADOEndClientInjection: PageSetup End "AI10"%%EndPageSetupAdobe_AGM_Core/AGMCORE_save save ddf1 -1 scale 0 -78.648 translate[1 0 0 1 0 0 ]  concatmark/0 [/DeviceGray] add_csa/CSA /0 /1 [/DeviceCMYK] add_csa/CSA /1 /2 [/DeviceRGB] add_csa/CSA /2 cleartomark800 path_rez% page clipgsavenewpathgsave % PSGState0 0 mo0 78.648 li130.405 78.648 li130.405 0 liclp[1 0 0 1 0 0 ] concat%ADOBeginClientInjection: BeginPageContent "AI10"%ADOEndClientInjection: BeginPageContent "AI10"gsave % PSGState0 0 mo130 0 li130 79 li0 79 li0 0 liclp129.905 78.148 mo0.5 78.148 li0.5 0.5 li129.905 0.5 li129.905 78.148 lifalse sop0 0 0 0 cmykf1 lw0 lc0 lj4 ml[] 0 dshtrue sadj129.905 78.148 mo0.5 78.148 li0.5 0.5 li129.905 0.5 li129.905 78.148 licp0 0 0 1 cmyks38.6207 27.7544 mo29.6207 27.7544 li29.6207 18.7544 li38.6207 18.7544 li38.6207 27.7544 li0 0 0 0 cmykf38.6207 27.7544 mo29.6207 27.7544 li29.6207 18.7544 li38.6207 18.7544 li38.6207 27.7544 licp0 0 0 1 cmyks101.621 36.7544 mo92.6207 36.7544 li92.6207 27.7544 li101.621 27.7544 li101.621 36.7544 li0 0 0 0 cmykf101.621 36.7544 mo92.6207 36.7544 li92.6207 27.7544 li101.621 27.7544 li101.621 36.7544 licp0 0 0 1 cmyks92.6207 36.7544 mo83.6207 36.7544 li83.6207 27.7544 li92.6207 27.7544 li92.6207 36.7544 li0 0 0 0 cmykf92.6207 36.7544 mo83.6207 36.7544 li83.6207 27.7544 li92.6207 27.7544 li92.6207 36.7544 licp0 0 0 1 cmyks47.6207 54.7544 mo38.6207 54.7544 li38.6207 45.7544 li47.6207 45.7544 li47.6207 54.7544 li0 0 0 0 cmykf47.6207 54.7544 mo38.6207 54.7544 li38.6207 45.7544 li47.6207 45.7544 li47.6207 54.7544 licp0 0 0 1 cmyks38.6207 54.7544 mo29.6207 54.7544 li29.6207 45.7544 li38.6207 45.7544 li38.6207 54.7544 li0 0 0 0 cmykf38.6207 54.7544 mo29.6207 54.7544 li29.6207 45.7544 li38.6207 45.7544 li38.6207 54.7544 licp0 0 0 1 cmyks29.6207 45.7544 mo20.6207 45.7544 li20.6207 36.7544 li29.6207 36.7544 li29.6207 45.7544 li0 0 0 0 cmykf29.6207 45.7544 mo20.6207 45.7544 li20.6207 36.7544 li29.6207 36.7544 li29.6207 45.7544 licp0 0 0 1 cmyks56.6207 45.7544 mo47.6207 45.7544 li47.6207 36.7544 li56.6207 36.7544 li56.6207 45.7544 li0 0 0 0 cmykf56.6207 45.7544 mo47.6207 45.7544 li47.6207 36.7544 li56.6207 36.7544 li56.6207 45.7544 licp0 0 0 1 cmyks47.6207 45.7544 mo38.6207 45.7544 li38.6207 36.7544 li47.6207 36.7544 li47.6207 45.7544 li0 0 0 0 cmykf47.6207 45.7544 mo38.6207 45.7544 li38.6207 36.7544 li47.6207 36.7544 li47.6207 45.7544 licp0 0 0 1 cmyks38.6207 45.7544 mo29.6207 45.7544 li29.6207 36.7544 li38.6207 36.7544 li38.6207 45.7544 li0 0 0 0 cmykf38.6207 45.7544 mo29.6207 45.7544 li29.6207 36.7544 li38.6207 36.7544 li38.6207 45.7544 licp0 0 0 1 cmyks47.6207 36.7544 mo38.6207 36.7544 li38.6207 27.7544 li47.6207 27.7544 li47.6207 36.7544 li0 0 0 0 cmykf47.6207 36.7544 mo38.6207 36.7544 li38.6207 27.7544 li47.6207 27.7544 li47.6207 36.7544 licp0 0 0 1 cmyks38.6207 36.7544 mo29.6207 36.7544 li29.6207 27.7544 li38.6207 27.7544 li38.6207 36.7544 li0 0 0 0 cmykf38.6207 36.7544 mo29.6207 36.7544 li29.6207 27.7544 li38.6207 27.7544 li38.6207 36.7544 licp0 0 0 1 cmyks47.6207 27.7544 mo38.6207 27.7544 li38.6207 18.7544 li47.6207 18.7544 li47.6207 27.7544 li0 0 0 0 cmykf47.6207 27.7544 mo38.6207 27.7544 li38.6207 18.7544 li47.6207 18.7544 li47.6207 27.7544 licp0 0 0 1 cmyks101.621 27.7544 mo92.6207 27.7544 li92.6207 18.7544 li101.621 18.7544 li101.621 27.7544 li0 0 0 0 cmykf101.621 27.7544 mo92.6207 27.7544 li92.6207 18.7544 li101.621 18.7544 li101.621 27.7544 licp0 0 0 1 cmyks110.621 45.7544 mo101.621 45.7544 li101.621 36.7544 li110.621 36.7544 li110.621 45.7544 li0 0 0 0 cmykf110.621 45.7544 mo101.621 45.7544 li101.621 36.7544 li110.621 36.7544 li110.621 45.7544 licp0 0 0 1 cmyks110.621 36.7544 mo101.621 36.7544 li101.621 27.7544 li110.621 27.7544 li110.621 36.7544 li0 0 0 0 cmykf110.621 36.7544 mo101.621 36.7544 li101.621 27.7544 li110.621 27.7544 li110.621 36.7544 licp0 0 0 1 cmyks101.621 45.7544 mo92.6207 45.7544 li92.6207 36.7544 li101.621 36.7544 li101.621 45.7544 li0 0 0 0 cmykf101.621 45.7544 mo92.6207 45.7544 li92.6207 36.7544 li101.621 36.7544 li101.621 45.7544 licp0 0 0 1 cmyks92.6207 45.7544 mo83.6207 45.7544 li83.6207 36.7544 li92.6207 36.7544 li92.6207 45.7544 li0 0 0 0 cmykf92.6207 45.7544 mo83.6207 45.7544 li83.6207 36.7544 li92.6207 36.7544 li92.6207 45.7544 licp0 0 0 1 cmyksgrestore % PSGState%ADOBeginClientInjection: EndPageContent "AI10"userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse%ADOEndClientInjection: EndPageContent "AI10"% page clipgrestoregrestore % PSGStateAdobe_AGM_Core/AGMCORE_save get restore%%PageTrailer%ADOBeginClientInjection: PageTrailer Start "AI10"%ADOEndClientInjection: PageTrailer Start "AI10"Adobe_AGM_Image/page_trailer get execAdobe_CoolType_Core/page_trailer get execAdobe_AGM_Core/page_trailer get execcurrentdict Adobe_AGM_Utils eq {end} if%ADOBeginClientInjection: PageTrailer End "AI10"%ADOEndClientInjection: PageTrailer End "AI10"%%Trailer%ADOBeginClientInjection: DocumentTrailer Start "AI10"%ADOEndClientInjection: DocumentTrailer Start "AI10"Adobe_AGM_Image/doc_trailer get execAdobe_CoolType_Core/doc_trailer get execAdobe_AGM_Core/doc_trailer get exec%ADOBeginClientInjection: DocumentTrailer End "AI10"%ADOEndClientInjection: DocumentTrailer End "AI10"%%EOF%AI9_PrintingDataEnduserdict /AI9_read_buffer 256 string putuserdict begin/ai9_skip_data{	mark	{		currentfile AI9_read_buffer { readline } stopped		{		}		{			not			{				exit			} if			(%AI9_PrivateDataEnd) eq			{				exit			} if		} ifelse	} loop	cleartomark} defenduserdict /ai9_skip_data get exec%AI9_PrivateDataBegin%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(R) 10.0%%AI8_CreatorVersion: 10.0%%For: (Ken Bogart) (Dartmouth College)%%Title: (SumPrinc.eps)%%CreationDate: 12/10/02 9:24 AM%AI9_DataStream%Gb"-6l],MtE@1G`nIGAm(SZ('iV*^7(a(W?E^lge8?g&S21u"XP:TSEXK3cF`mI!KqIaE4+$V+sX08ic=EHuUAVHs&5OR[rk'$K[%5.^dRS+hF1r;E8U^\Anc^@<r5jH+:HM)WDMdmkMYkKeYPp8_\mgK8eh_cuS%)QgnoD6]*kibcpHcTQ[GoZd!^pL!sob:fIDIeD7e%Mg&NUq:2Zemb`Hdo]O[nGCPtZnG)gk[uXmDq>Apt2s&Tk(B5N%IfIr2IsV"X)u6sps6fj7]5R]Dp:')@[t"=fkOIlAn;I,Jq=hpJ%^]&NfDY3A;MpMFml//Zt*DlY2c+j2Em@QTBlK^)fqtfn;hZ(&lNQ-0l=7i%*^\u>g$6QtG,C_LuH1UP!?U+GMh:F]TS#t69kL[J[%)*Rni2o#.r!+3i8ji39%c<f_sX*kpop7GD-s7)Snpq9#39tX'gRc",<!Nud_ZFHA\Q>(aE#G1r7$kWdCVmk!%H2$"DDe/sE/%>=$%p5HbqIp:+$.b`&*^YIgCc!>h.Xm+SY5C`R^?f1e!B2>/7s8%YWrp:62rVT5gp$U#,5Q:T\)9Z*/\>_V>oQT3*Hi)pnhgbXu5a-`0%UAZ1JpuC+Q#*NU@hgHgZ\P,Wpecu0Hfp@27qt2)Q0A_*ZV#U:g3W%>kIe3L"Z[[K%V,@>#n=.2*IK*)MHm/[;rMFo!b<%Z^)4[jc%^Ss/+=XCceO5`J!=N:dHG#6n2^ARn)T>1E6TLK7W5CNA'+#j%siMPjH1?dK$r87=bNc%P_l`]3[\'`bkr6rE/oDIM'J+i]RL(A.F%l_]Z.h@G3ds7"^nTD]\?/`$?f\,YLNrnkHpq7H/E7f6O!rpCeVT?i21Ln?E][kZmO1$W[!+7Z^%<=2opJo@KY<@MT]b2X`DllBqh%8"2^Ai9B+GWcthe^[O0cS^1tl53'cV)8A2(dH9s2^O:J\"]%?HiqJLpqM^G:a/e7J2sP>O,_$orkp-+c<gXR"7Ou]>1Y(Ak7edp>%0I-LTGnUkf/EVW#nI7:khrmZ%Uci3Wp`&hE:I$W^]Ml)7mmenP$\+qrj!.r:+,jHEXB8FQiGX-BB<J#]Z0U'7m2.k8Lb860>%)mT%)a3EmlE'Z&\mkGk<gXt1=L"UH@Xe(kh_7,tJ,HDn#6]OO($::dFVU06'X.@^]TG%$Oct7(Ai`,p3a*uhL_lVmNZKFsETqhXB<IT0%i#f>Blq!P3*M1hblYeLBr/F`LhjC%q7%_HUBS5!/4sFQZmjR>j%8,HP@F>L^%3nqH;-Mnli0l.PF``L`IBVW>,Njr'DE;sJinLkb%I9qE,Irsb_1R4DObnW1k_k[-,qV?>,5'-RV]62k2`7%3Q9&6<?NW/G>7RPtqgF<l[gH&_1`$Cr2YedSb]R6pVX&"'1j:?\h=7l26%"T?U=;u`Yhhm]6SkO_Ws$JBmnT3Cpbp/D!uVVbV<]:8c0]@5YR5P<A$]mejflCZNq%hB$#Id3QWYP%ed;uaB'8,50r%Y*fUl?@^+%T4<<nSPsubB`>8"51J0dfY6gh`le5;B7A^8rVbbdI2G2dA%N];_ju7#?,-7u5)#:_aR?.S3sY_.W-iX_IAkT[mcjS`-VbcJn+#id%[eK3:r1F",rR_(<GQ3.Kmi4[5DsIM^NHa6eqLH?Ne)p,>'+Z^t^VQDjmmEa_BY?_(Vbk\0^<t9_G[oM.%pJ"_`m9AO?+(Ajf:Qi^%i*RF`2B3P<rJC^$BuQ1O]-!(sIcq(Yj0iF8+RtA>?1tafDejk!LpR*-#[\M-)#<nCiCi2mIJ!(9^DhfXqgFM;^,3RaMZ#4;Y&s[A%ep-T.pfc/pf)J+V%Tm/4[=&uVNOSAMUVDig2Td>J?9Z&lfD$0Uc1.odm/P*rBl/PD7aX2Uis=$R['jn$Hk3H)3OVT+[,Q;=?N%c`%IUug&96@YWJTSWNmlO%F]E,CJc/XT)@_]Ya]s`gMAq?jeHH16U@^e_B&"U\_HgF,+=P*Fj7c/D*+'S.%T#G]_J(Q<^hNrTS]6F.[%?1O[PF_n+KBn[TtGD5AP6r]b8J%`d-5\%hpCi/][*S7P20_J_L&[8.uOWM7Z(LPpFp]UT!*qe?U/\bYRGl%;snlh+NoX.P6ZA,O)%U!4J@!NB^sGkf%&=.*cNC+j)?C%.lDo`(JR^-&S_o`+n1qk=&in+u\:NWQB^&)Qm9(B=DZqXNOlC^6s@J+WU9+(7sqJ"=?!L->Da%>$?FQjVRC"plk\pr`ajCn_:7^q26/Hjng/!nVbfkoCjs:T)S75VgNRcIeiYdqXUsWIQi)Wp!)BMa5d32q60hlq:BP7FkV>YEAuk=%rf<t,3W4`^(uB$GmJZ)$j3VH]lXP4aO6JA_L.D:-?9\prs5EYHp&43gfDTi=?!irMq/q!(?\d84[2W?Jou"\bq;M>3m\)kPe'NTe%6[hQ:nKC$i#BtVZ^HOlPcfb2sh7904\Xpu)T@5fl_qC[<rT!kBqhP(?rVc]NID9^potK5EqfEqK_nEg/Vn:!]f67aLkI^W']=U9%%9"ca!q(CLB]5Zs%L)SoUpP44cp\h8hhKnRckFR"dU&48tk'Yu+g:?#MQIK,#[G"6r/[a4to54!6qKf)WkB^M(C9Obj>&(4>`kh=q%Flfm@/e@&Km`So#V3P4VaX*3S6Li$cnmd->+7_GLkI]Mjb;GWVF38Ll=J&lF9Wuo43iDjsQ[3DGVNPsl.Ai2SEq(luNXtY"n)I^?%Z(5?`-0CS(N$8&]_IIg2*l9qmLV(n8`7?]RG7$'Xi.LW^rj<gVg#)ZghgP+H(S?-Hd0K-R41VVXDQJQ(G6;8kbh3^i#3JD4%Ml/G%G]G_brSdb!5ne3dA-\G)+<R4>qSNBFs6A\<g\gI:5(7_UT[Yq,RC%404O='$jVQ5c9`#'B91k@b&EQ/Q&JSeBPQ$F4$1dW[EV^P$%Hk\F&k<V:EqqReJB(#o8GCj9%2#C8J'`2G<khGk[aN*&USYF#7XNRB?NIDr8F-b.cII?INjjWQ@b0*mUrT$mRYsi;<YG:2u/29=`%5@^tko3+<gp,U=ZhEH.]5m_a%%:(AK5Lhqd51r+fVU!KDB%BYR+86$ZH5&Dd/[V=GZ[M9'F(_+_T-g1FT-BnDT60)@.4R>>^/0XV%(]O%7Ikq#q+&8$\f?_@nF$>!>00XUXm'k(0Bc!Cfplr\:2UZ=-W,5>tpX]$E(SB`[1%1<MgW0$FqK[Ma4<-QJj6'qlFo0r755jKi%%\L=]:30dGT7$F0_^Ac<\Ga>0^]tX(TRR.pGWi&2g"[(BoAg-n]L;W]QLms+dJaY(rH5pUiM93nqf(,D"(I$f;d9scML7#`Qg7sZ%PRG]h=)ouMR7K17P^Sc+8Y;g5EY=6VV/ln*cJ[:$NPmEgXf!,d:8bXqrZn]-+!,9Fct3+D*7RoLB;D,d4?n+_SkjC>o!%67.nB+T%../m>)uo,ic4ccsIQ`Mf5]M>6JI2eZp/+E@_*4)>7-^.]9k9!Bb`2`4s/7n%U5eXu+bUsGT4O^c/F:'Oj(hdV0C+;A.C'drOFJ$V%"3"S#RKS99,U`bhc@VBQ_*a<0A%#AaG:/Tj'HUi,5t6ZMeNs1_CkMVi*?N5/GWZEboOE1+(j@%uVN1W(a$.'VqrqPUX2dMuIOn\C%1Wj4beZo/NfSB4]/:&.Gdc7!)58H)9ZRV"lX.I>ie]/hV57Y#n3S2;;dXJ9>*/@f@LL+h7S:GhD,Wq,$nTB0uV!\Hs`,SuCEGF'E%HM2?9hN-.X@@X?YVm-L)+HAFAgH:MP3f`)-J*/eO+3(S`3&ZO66kdUdS]A9Ha8+Q33IX3<o7q=g5E8Iu#;sJ?hWJnHf@(92q@Eet%LHt>_"G=b"S,=D83!=su"Gcj#L(nVdUkpmtU^rMrTD:d%EC_'p802nE+FQd)pHp-M(m<#$#oaG?3CK0aYXb'Zq@I5XX+sdZ6c+=X%\\apWCj]X:!G(B>NPB?+\_0d%:?O7=rGA$NgXb,FhDXu\aL[)1M7;laD;>)Uh);<Me%&!C]@1rbagU<>-"SUPS[dR.g[<hb3n\A]%fhQUdEL0]$1nj1ePRZ=NFe=B)60!U?nI\/>L4U!7+Sh5ff.<-sg93jCfE#9$!VQP;_HD$ap&dL>Z7DG:#!mE&<-@>VIOp#Hb%AJ5%l*=m)C$rHo_G_KP70*<U!1j7r%.Pmd]U,>W8#a,BVqU<F"aX%<:Xl"$TKV1>;4Xm>cE_(X#JE.ao]DK?k%b=1*<)k:qJs<E/:U2j%?8RAb5uYM0U*f>?r)K9E$h*ZLF:cd%WQ3VTitk_Udm6U?VA9\g+fG)Og1,Fg(h<j/r[V)l+=&0eo[Y7'GPif^`NjRP[tj,ZJ)d[p%\,:EU%]+Uk:$V%_rUIARIX<"cq"A*(g;ADrV<N2rIK'5\J+;,tS`[[F>LP7\ob[%2gsrTt$6&#%QcJj[q!"^"j*PeDo[Dpl]f:K;%l14UU*'aCDH$h9*T74@6^)+gc=68rs-%)=L7si2[5,Sqj3rJKnkplJVaR[#/Vqot"p#\bl:-6A5:]1\W5@(NTrQrlE+mXcQ?`_Yi%*#FOBN""\^1X7XcS9\rGN@s!>gu9,fYmQhHo<8$cQe?Z;%rfpP(0FcTU-7.N-PpOTi+8fN?2W!T0i(X"3V6CWC4dHRliI8iYdF$A%BK%mMj7Kh<^OQ::o@lLdr5h2_I].9gJA25pr3Gkl(C.?qqY&aW0E-:hJ)'tabKo&Fl0Zaa`c"%f2otZG?V$pa%!n<_!(mlN=lLi(%>aHfRM;iVG'E,X#`DrnsoHA)DW`8L/ElI:\qWN^q$;0@TkOn97Y^Fa>kC36^/YC>78U/5JWQV1jT=fR"r5@],<mHp,QiT91fDRbk%mE`]@3R?#75:>Dlr:K+"Q;='DZ@,cIoj:aS*c?A?_U&I&L;9<:Mu:_cFmYM;g+ri8"u3i<omu<rao9lt8S"rQq&XO8?[i"HB*:'6%:H?g;)#oT3I'XfemcL/A?,$<)n^%5^!<7A/DZ8VW?iHP,q4kb*q0+aQBDFRaGVf=B?1D8sro*5,HhmDSn2H;g[k6?A2h1gX4oMGZ%qffngrfd$L=+QW[Rp</Fds-gYhi4gsmG`&:lgslImEPQO::J:JjmW"fCQQ^+@$?9RpiU?`qe^=)YlVTl%Dit2p^J1pf<%?[@o.4R%p20]7DduId:4Zc="p:nYcOT_m)8R.ffg_ptphQO=nB`1&-Z#G+p^NdGT&+X--d:;M?U7(U]=&ArBT"nJ>t]eig0naQj^$%941+)h%EkLdlBC=n><jB(I0'9RM-&c]%o30l]G&44c=Bd99fT(#T>7u*qb;kN*%aArW0;5Ls3NojXKN['i][jM)G%dq_=Bc^)d#N0L>>EhE%/a%YU_I:,CoC9tLX_eASgZ,rt[Y,[Ul7CMP$9>QT*7gF/*S\k"3*jS\H7<$Xdor6djjL$H=fkE]C@.ME'UFK^=Sl]Or(Fr<<r8b(%X8-'H_9WM1bsnA\+b?hV#hg2j6;]C]D+)b%aOf01[`-sVTVX%7jk>jrdnTITN*N'!gmDeZVT>I6D("\sQ6T_j:=u6l#JRX;Y[bF/%JR,_hZBiP!EDN\m,E6$2bL2]\A(uk9V(H,r[Tn?ZWI`^m3*L@2FgU3Da3h&,k6qi;M=\.B,d9X?c=1WPB7&uH^[A\@anGZ;jt(`m%XY[jaNp1RrCKnZ9D)mN^/Rc].SAj3JY`!sQpq(DY`0SH3<I`at(7C@,bcG+oYbgTSl_,cjYV_nL4Z)77QDS`#a'NlqCSs'dC\[>e%qAmg!lq$!J5J:+^)Au$p>@3Z(cX4?b=-T+>U'CXCP9BQ/\SLh=$iXEf^79Y2"MXO$bcf`kb0K)u+O9Fis)f"'rQUs`rpD_eh<cK^%_848g)3'VY=$0N8I-:(m>CY,a8E;pFf:]QV=a`3-o(#]QNT@o\[TB<[2urd*0;MFbfm/e[elCD;00P:";j%B^d?s)kb/Z6%S!^[o%TqaSR\KB8XT5eW[d;^T3&Rf]DXGt4^I,#0F9R]+gdtX^)4ghq?%)He%Mqe!Z;%P:d3O^b#e3'%1r():m0kf-N?P,u)@-)djR\d7l%h.(k=nOc=M[\b5C%n<eEEHQBdLM1j89BXZJ(ioCg%=K2Mf]PW`$F_<N*F"dD]^;l*$u1_Pe2afh85*F81G'7W&pAF)jP[=eQG(Oj%77Y@ZL<OgFWt&qGg)*0qJ?hm*%ph!#l>?/ObBb,I/A[[]8]Efq!*Lu+X>h02-OqJQS)X.Y6&skkK7\_jUUf5n5NKP)S,,&B0Vl%8%%2LA8"b\%YVu,&uTEf.#A$F)MIth,g2A8()[_6E,@u=R45,8UWab/nr9ucHVR:*1[gi4a7USD)'0b&.BI+\g_gY3(DjaJjQ3N>Wp%ZJF5pi4[JQ?HIY,UP;,d2dSD(11(f-;u0dpJOVXKr'mM7P>f[pZ?MU8UD"O>\lH!fCRZjcQ+hTN(4%NWCR#(]G:4jpSZr8VoHHgd%N2l`.'/$E\'+EO1"6F>Eh[bZ!#`ILuOln.Eq#t>tIL[jKcjrc*J1[sQKl1s7L[K`d]Wjt&c?iZ)E3,&J%`"aS]^H.@jnk/Q_LC]V%Fa]=&_&h2TK+>nmXW&:RhmCEh_>D\NFb=Uk;5ZcO?F`*%*TXkjA`'F;D#@FC%m\j4Sau<X&gn$Lm^oL2\OB>g^S#Rg^<sa[B*1gC%"UsItS``;jB\,`,ksbb(/V'ZF&%(hK8R@bW$^]p")cQC`q_$0_,T$fFO9#cCHlP-0,d/Et?nVP2j?pQl'L(h(S)5Ta!1.3WkLt&!%;VSBnRkfOH?+UX\4J#6iXogH>Seig&0;RV)!a,/n-YKcWJ<IVc<#06)#!S>)[3PfED/60dLVQ*"9SMjPN(ek(/\HJXF]JmJ[pq7=%>NQqZ)uVV@>@#h?C)iWbVEp2$R:ikr<3',nedIu+:r(a_Qa^E862#>gDbWe>1+_Tqe4#fGeEJ0r4[.TT:*rpSd*5=IOd59;8!"qn%I^PH;`gtUYNk;i$("-\5m(j8,HuZ5Y'SVal)T3t<P]tae=kC_jCk7/Q2!B,8;I6a#.kk`r(ZqQZ;UiQ)#;tbsfTDO.6lTW7c5sio%)qE]KSi1m!mUqB/E\*K[NbA;CRgbJJ*i1lu-uEG?>S6Fg*H(J)J<1."gkc@A1S-ok2Si^KQBQ.teicJ(_HiSRkTPdbdPg'cpE?'G%+]*mK^k[_%G',]?Fe$5Yif_Gd$PLVGDibrm]uVWE:.i/7e8<J&m.>^eFs4@)m;c%B4i8jujX+6[D:1_X$.h#'4g*50?;pP99=e))%b$GhQ=#?&Hf.m1LgG`PjW*]dD^Xd2[rb/d-pIDPii&;6roPou?LUsf!kpCiiQ1Z8LO8]mqg]ZrjCbJqP<i]o968Jh[9$QC]X4SsY%lH2.]%+sfpK=ni6pB&$$?FF"hSR&\SYUAf(b4#^rKl.hZKFc(^<"dbEef>V:71R"hme<fa7_Y43'5JQ%Dj$D%hq&5+k3Zg=^A[?Z%e]m,en(umul?!/BBlk=06Yd[1/rC+1I\K&)HP*<rU$!H_AKRb$Io>U>s7o87cS'J4h(OO$`8<\uCK`Q]nXjqiCT^QY]K<Gb%?34l%BP+u>rA)+<+CAUsS)k<3.-01(b.'Pj]HM/m=,0ZhirF[rKK;jnL[B(^H:P66d@b%u><SieD['5<EE&W[l0,4XJH:*?H^n0HhVk+I%qpV7'qA;a=6;(m+7*$Cf*Z,5-Wh,8=Hu+GO93okgJL`&*CCe.?YD@:_p1OL$ib_=`]MgTV0`d?e6+\+`E*rkQI9'C<dA+c*<I4!8%!jWc4`bn>D5eZhCk^Wl9K@u20E+>)i0UX("Zt_@3&tAo/rC%f!@g6GI6cbS49<`pBM!lq*Lsl?44Q(OZ%Xqe=)(.uUB<6P9PVK6F%a6WMl9+m`c?pmRGBBFOFKalTf]'1N_cuW0c.Eb[[pLWiHnNH"#ooXLbYSnR+#2g/R(df2=X$FoO^W-pE37qV\2ZH&p[>FdTVBS?A%)n<p5@6?;Alt^G.*HIRMTra<aAK.[&T'e=t:^23]&.ut/0m'4#l8(E\CQdY/fgMo]M)&$a./Y-@#H442\e/";XT0]_K<FXUG\(>^%#6Jr,jMZ/^k_lZ2M)C/Td[,QZ%Zsf1r?.,g60L#ug*8WDn7<M7]:ot_9=O[;EmVebcj&$"jChsfa(h:)VMdX"fOZRn[9j^t6@__W%"FG+Wle'6!K9k720&3t=Xa9q`P6j5+YbD"tq^uVK_s[diAiTM)pYNo*`]!$jNU/7W<5Oqt_AZlacU,F]@Q?m>Q<uT,o&((!#Vj-f%TLa#>m,0T*CsW:53Kl`p0@O9hZ"puP'^@CG!tH@oAG(Ahjp)8,AcrhX`tl`@Qj/RRNDmbq,Q96?BhhOWB#'!?)g9#Mr$5`[#fboG%%&'*<%)X-\67>H@A&s*)#lu)f@<QNNMAEAlG%5WL1D\ES=l^XeS+\;>8=Y\@_]!b#CMP'6F]8q*RY$u\jk58<MO6!*9soh=Di@e"%"VMt0BO`SqQ(hRD6jLIJr7&9aH[m5@p)NF?_J08VQ)M_A,GT5E,tplP+:T-#'j4U8Qq%-Dc,C!sp1Wfh64T+__!FCB1E"t#.^9\m%Zj7,39hoCgRX8-fS,&;hm_[:)bVkPCkd6B=2J!C/$8.a^IhA[.FZ.hN5^Q:lh$]DcCc^c>rRgpZL^6)KeHE-mJ=9%I14c)4.f0E;%)S7nXT+-$`1+<b!3\-'LUb!3!)*bqO]I:?#5:\;#np6eF?lX3?%9W2<MWB#ugHZ`gboO7L(th$WTOYp;)Z\$PHr&J0'034J-_P*R%CbjP0%dC27l;Qur#-t+Fbq-'eV<NkagTaS6A;^sqc<`F>=CLFiCkZ193OIq+&7T`Br9CpCh6M!]-rZB_QuEtd1L9h,&CI3&i1(W>%!h.\lZXtn(SAf"4,\Thl3eOmN\_+kLK\G?kG.QY;SCPe;'Kla26MIo?q6_]A54TZ`TlG<#&/38dGcU)*)<Pll<!S]@j8Pd5n*'$M%4i2UWip_+4[X'Jr':(cE%@UME;;NYJan]IRM(o`!6nfMbc=9ACFU3"Tef>_%pln:'fH`f,5\cArK7Cs^im]k"&ct/7=G!+==Tp<0%BuihT=SNVk60M7Hl/!IOV$D^t,@a$[$DJ!HGK!19K*Zd?0M8Uo`S+%;eCB+Ff5r,e,*WDX4\6a2Jf#Dp=O)V7fHYDV6ng;BWb`#p%UrW5diD^ZM_]&WE`L[o^N6\2T[Q1<`)Op;dTm@LD#JA"n>Kr82i7Tb5OcDV?JsUn)0c/=m0#'>"7\7FKk]1@W.c-VSYW[(/esH]+%!S<'`du<l-f_C`=8R>Y$W<-XM-)o/*%7prb'84c>WB45l5r"Ad%ZaK=.&mPu%=MV;7h]:l24/)nWiHY&JKq.:q4>G7W^Za/)[4o2%&7H'9L_F9sEr&(g`#7CO.:2\/#!\AC#_Se9AS<Aun&`f4PnT9'=O6RN0/4Fu)3V";#EaEj]Jp#n@l)9l5s3?T4ucLXgL.lfKQ4"$%?H;.KUQ@9RP(5C:q80Pr`<mueaR$bh6@5L2-Q6tHr"O6!N'BT"_XbPKKubneqn8(L6YgFUX%L,U!,7'/@5j/t,0(Ps$p7k$S%D@u%(,6)+'u=E*A>/!jb)>X\NK?_X[R1lB?EcJ0+)d0eM#:u2>n3buobG5k<^g;Y2VAt#G!]-0D$]"V$_QWmWjR*[?h)!b@6B4V!^^1S%YCiWFL5i4C_>X\Na**!q#3@*hI7.&DT\S:n&`!n"!Y1B,6Gn'6OKP)>%j2u\G&3FQ]VoaXg'7(*AW\[rj']^!YQ;OJ>:NSgTYa!5%!lM+>_MKQqM'=''>Zqt1Zr7`6[UM0Se`%,[P+&>/U;k$CT"(RkosiDH^hPDqJ3hDrW2kkR<&lY_6-3*L7$Rijoj)Yj;<8FdB.ptc%;<8"=M-ONY&QK<OQ;ts?<A'b5#8J)U*,''oj\8^bN+L5m(D'Sa:j8#cGZEj5+9Vp-[7jQ1Yp14k4!Hd3+O:@.#S5/+NT/H97?ng^%-FG<5@@Tbo1t_4U2k\<e$SXVG:Q\jhI21Qcld$P]c+jFTac2EqB6&e&40TOAk]7:cJk4B.C$f@@'Q%^"7Rh9k-CPo69+"hHpB/g[%'<A-+3:GfIKk=tdN5At387Efse;/aqb;h)1*8VT.n;g=ui%_O-Pk0bVLXSog7B_T=/6/7eLa%W9/CJ=_"WsbWm`ces$PStHnI17m%Yd(Ip7?<'u3J+pje`5`&#nMY_L`Vo0]pEAb.1a!/422']JK>&Q+_JGXoJh*NKWL[nE\L52!>e^t_s`5[5M/G)HaIREd5,PHCadqN%7rG\IF4nI*BiY`8[0eQ<?/J.lH@.A5eu(^0$<,Jr`+(C=QuIXd`Lnp&fI6hF`o1>PJYXFO;AKEgJH_CF4ep"Ib%Uht$A<"kkTXOT%Gf;u*@hsOkApd=d6^dLA=pjbjMs4kcBTgeVDm1ht7,o!fJjH+[YV"F'@DcUZ@H1bQ$l2i>LLiS%Nm!YU:`)]02XMh`'Xi^P($uX-%+]'GISQ<o9"B"kh@gbEU&5*55?'A3p@nQTJk_@k]=[ct"Ii[$>PhkAUKnsG8Bb.L63^PmCLiF>n*JTab@]==-?B+o-4[M[9TmahS%(5-Oa21nGY'*s^JfVlgeiQ+c>&q1L^IZUp18Gcb^39%B>7?&'l8]&UX?Pmad,G>n/8CMm;2DU,F(`-$P`PNlTL.*L?5u/b%0Vo6^%MKt,^A0<LJ&Jd1@4.'D$\0(FN<iFNa634&C,Z.tO<#PH;5TimC6q6jLFdV<eCu,Xrq&W4e9Ca+3%<u!&R]9l"6+eg[ksZ6p0MJ,K%A1"7Gd&H"!XHctN"8.;.?r+b_Ul4cV"OYuDZnoe%7aHW33#Y7"0mi\uPZ"$S*(2)$=kI\bPNh)c.'R(`M1^l66F136W_-"i>$'N,%K/78L8I;R4oV0qE+,qg`eaJ_U0U_"b`oL2TV'OWa*Rd$KFP,Hp6mepU&i\k2<9YYpAaGmdV]170ib"iYLG6">J]2`B+r$Jh3aI;-%:r:`H#*0G!;l;.cMcZ`m[)jLAQr[;%M?QuF.`fj[60`S-G4=Rlf>/QZ<Qu2jXsOkk<kWCX)+p9gHJRd/Cg%kWNrotUXUZoeC8fW*%KX$aq[CVf86&7V)Y!UM$@;9qmW[WX**<Hsi/u5/$2G&$HdHf^2.Wqb6Gg0?jSQ])hi29a[@:OD.Wc^Sc+Q].t2dj%I0_IKbBI\/b%-+UXt;sLB9FbHaE<S2J0Qs(M>,GP^,>$]+]O(i?OK-VtM\trF4a"QM0<N@WU-%BZP"UqW2WR[,c<iliag)^p83fmX)IVO$#4q=T`%<]A)9fC`%@)[)f((`B`m!bOreR8sP0#f)\9![G@`ISoA;']lPJcS@1VVVJ'!'e">b9s"mk&"Tn$XUYqL11/Mq7^k`986Zl2MEom0%Fmp%+9rZ$E>I0qo*KJ=UOesOL`Td:pVaJPF+N^V3TuS!OPn)8Y9(,U@J1qe7WH<qQ.&NP5V*dX<"2?OTY(/$8Irj[<jA4[bYPI_?%?[i!@[pT+!2#fF.9ZVU6ZbpA`og*cGpi`Ar;qugdaK)lFq98<YXnWQR03TK4!?AhSVc.Xb_)>ghIh,u`[R`s_fE73OoS$e]a;6u7%Z2G</,BH7d5eu(ZmWRcZ?3jXP6/'spaLCio+N*#n#Zr%*P@s,I^?l-Z%t,"n2?I7C>0+2/0\^$Q"K[Ren(CL(!&f.S[XN1)Dq!V!%J,.>js2KNejr`L[ou=_=b_*O<)uos0?VfRLr6=&):-5bn:38gCYNh3kDrDpq)XtCg+0>#B^:+om\#S?GqYg@0JC=Psk(L[)d3,b]%eea9n4'9`%hXhL%TY^LoE?,+<fd)n#<>"V<?p3N>FR0JA=bs`$FnJ%n6`8r.(j8suAt95JWcHHMmO$!bq;'jXU[Rb*DD/JsleuQ?%rru!5o0_FQ*"lc$=TM#cDU:^bh"<N_X'/RGGHYY7d!tS60\3$qMB/VqLWFUh^p8&`]=Q&nk[JaMU'pJuL+]__A;,k*[*lc3>P3OG%3p58gS8TA+9@6d-fGG9/l"3.cN"9+!]En(d:)^W`1.kYp9&NV6RXS]ODm`bA87%%gbEbS;&W/I]pP-rUZ7.[g$kguf/6Xra.nqCu%-$<kc2XsW6S)Q^(`tVZB]*5KJCY'.,nZQ^5U,efV[%jai4jaU7!J4#s'a7cF`Bg-SX_hDAD2<*+`),btAQs8MX)Jo.Zphp*JVU$@%F:rS_n:HD)+t"\'N&sur0a_V@"EE@:6YV4'6a5;O4C\&4qUZAj/gM#(_8?+X@7(MAB@a@]-5kMi)<9d1WNZIo^`^ng=j#ME+9/tn%lJnM+6[elr37Pu52i%8)kN,N%lq\+&fIq5R*sC&G1t9^TG'4o#56JOpph+2_+.n"3l8O4aX.+V<YN&u1YRa<5GH?:te)'JPq]Be*%2r,U"bXWL_]L(KA+`PZV9Lb>N6KBRYmXK:EgnV@22HrHpq\uDE(cHLgRYKG0n>)'KA)Aup$m8e3K4B@F6s@3(BTCAK%jVs6iC=IS%bL$0/-WQf*D$<sE@7UrmCUO]7>`i$`@ZMF%j"M==_'bG@KCS%?#DWN1W=+.W.fVneM2M]NF`;pk[L$,oD#l.2^rbYS"f=SR)k7j=%&%=Ir("1?,S:*Hnh_uoqV8reEd.(OAgD5G]d/*ka_B%mQ$pP!iO:>S7g2f0Z^b"ELJVQE?j2<Hrp=b)d3hjfaJKk7O)1aHl0eBHQ%#&T.ucp>InTU[j")-S*a6&G\ZA*EO4(,_IsZier,FC6t\Rqo4E&@QG/U,iHmbrF%.p;BlSnc4p++sgW=1>N6pTNWO]5`\VofT*C+%Z[P-He'r"r-btH5"+uV&HYBXH!*7.@]tI,aq*)(4B]uG4Yc?CWQ$B(q9mL28N3gqRA.`6fK=@NCPL5sBkQI(BRW:QLgN[3:<(rAm%fT,bu%Qr%eA@,DL.h\)3G(`4i`L5/GWY2chmspL6+F<CF5MN0=FSYYhJeE`9E`F?M,!FWd9W5gU(Aa6],S`NZ?re01l#Zp_m.rM"%ec+)'e43rh'5"\]KmBThXhWupqUuCk$utTPREWX_T2,FB&/(6I@#H74SHs5[Pm+6Ndc""9+KDsmJ?Y(<)qbFLjj3[jIA^4R7Jd*&%OD'3AA`'lY$+95D"0V+MTZ^/ET?E`Wk"io`nR@BC!Qf"1Y[AZOJT]/I&A&!l0Wm<b6])`H&T(np\>dYcf5!6^a#X4;L_hd&m@+l\%f\5MAm9WTP3mu^C3iD$1%5!CspF[o<&MH%<bbft&_$UUIH9E^GcUZnQ>nEY,F?5"ZmcA'4/$`=i=Ki_FJPX9\@HH6$`>c*Z_:%QX%\.)gHDhFUOY-Y^T!)\B!"'r/T_+?DMc(QRBNTq2(5()YD1l1VN"C!mg78Q[,il0tWR/V*ZmZ-3,T5'2eF?s4D0qo8`8GC45Pjh`h%4]N)JBHQnU6lj7F!t'i!kL7,UTS(Q;PTp'!AHa?GH*5YGm_Hq'G&#Y4@"6JX6nC<CM@^fE.c"Xk*.q"m42S;WZ(Fd<E)Lnr^/Oe]%9=`^d^jt-i6pVf]HA&QA6`1lB2h2@MNHOs*birU97P6A4qeX-7.'HU<EYj:i@$N>KP6qY=/ffL^;^=G$(,4`IFNp+X&RErQc$fd"%,\Ft^\o.tsNX/s,Y8_F>JdoAOG3a:=f*)XBj@F6On/htVU$*8=bmRXmSYCo.!(mC0%Tj;GbjDcf&I9K%c)t+nHGpY<FsA,KP"h!m%VHs?9p76*:h#JdH*@s9XB6Ab+U'>AG.#N:NKi)e&TpF&,@Rj$S(]uD(*J"\LSt+F9_mbXS\@#7gOMLn%HU!)XI+9XrIG9>rZX]mH%\0&Kj?3WK<?)Mgr!MZGiP=#6fK#rh;g07Nq0k$^t,H*PA][dKM&cugLZ1a"nPFd<$9X>"^Rk![.dilOGGsRn7!1mlq1"u)bB;33(%U:j4L9a-8VCfCljJ[>N9E)/NIKYS`O_-fi#H#Bu&lOjB:c)T*..Z%9B=/Bc(8l:TuUrhb8-eJWXHAU,3h<@e)40n+_89E7dhe094%\0fXr(bep892I=R2O+R4:O2@5K>Na0O$'*]Us6hq/c!%Y4tpb[-!gf&pCt)3]<!U#HKI+_Oob.]b>/#K!Yc[HCdOTBogZB0BiJ#h%&(7FU2-%W9)FSU5/lh0&^p4%H\BOVtie83c"9]-b9GCjS'Jk=63-:e<QDSd+.-)S?qIXD1ihi(\O:d7TT1u9YXq;*6KM$>RMinRE%3g2cc3B&rYZsqh?C]qW=\qWp)][5-Re:!Lh[O"ps&:-*[\0<Wh;]D,!=uW\.T0jT\[YV%XS8IQ1:nU+p$LPR6Bi68[>uQD5"DiEB%[:Io?6lmM5-^-'omFqt@(*Z#A<D@uIV?(W!QJfE^Z0st\=ka]L5=iFg0tb<.XQOF$h+cPTcLrEYRH:*7fYOU=Q3/%O`-JO,FB*g1%MDq$h1d"$=e:ph;!9Ye<l!hKY=*RQ0NEaJXL3A*0p7^EAj:5RselL4T%&b'a$'Xs)AO&YPB^&u/5cC]dKE^288/Nt>=NqaJ/6aXU%@[qqhf!Yf0>==#hocXi#:]H%ME$u:pSpW5R?"EW:<2:2<YQ1L%nG90>4_f5$G+b^6`$OS)*A\<>-0(=Wf\PTG@?<_(Zk?A;(U.uQ%TOd4#,bh*C6qi-:`ZaATPsoI3(Q=Z(G\ES:L19GKJd?RJrY(ce*2D8uoHZ/OSLd\6'0BU5;b_&sm\DgId"N/[7ri=.j:DT6.O\ab%N0B]-iY,O!p'ZLtUAZVX?,`NE5Xn+]DF(h4Kk+FC+mBcr]q-M"Boo%h,sFh3+QuY0%]'f`2DI!)9%^K<)4[h^;tpTZ.jk)&.fP2c%SR,&<#&B.'@ld7"g42%T'g%m.2g4dG,Z>#2SZ`g?U4I?WcoA3A-b(og5l_MWWer+DYkcs1W=FXglDA/$Ui*5u&<,%Y`@K7tLu=m(%T]3@jLJ=3o#:Dkh$4^Brr.,Z[GtFp.!Y[0*1_FqHFq_q?;+74!)VV59+qCji&Kh0*456f6PAUP/bml>ElI6a5-eef$jZT;m53HM?%Z.Pc#QQa\U%ZM=4;!%s2@\lR#(=9&5ntDM`h-oj(VHkEg796/3Yep=="r\J0>_Roa#-sY)R31u2g,>/9Hq:T/f9_8lj#"]@21#]b%`HV&+#DpCQWN2t,KfJe[lLYSm4U[Vm5ud%]S73XWolF-`a=G4Ko[!TYLakJ1&^G5ea#p5TX[EMK&\D*G9!H%Mfrb"n<^j<XN5*nT%%T<sUB%uZHV5)!qGbI($2KEGU9s:dHH'/Pec(Z*JU7*I6j*NYQ917dUVoFR>&cVtXJ0BC,)<6@[BtX&E;QCN8St27-mmA"lap&Vs%)#/P;pI7+!qk[i)ilLb>,J(DN+U_]%B#'a3H?s(#[D3W2Vh)u!J&nW]e%T:7G*nn20qf.b-^@5cjZ[Da/PQ0-eKtgcb;nlg_@nA_%Q=A3mfdKO9;ZTL.jsq$n#PY:Ai-XT8/cL!u:s+HL!04/38uY!YFT\/4Xf9<n,U"O=!<d*&6H\s`rRqs/e$N1!]*'Uk[LF-0-t(29%.#k):1m3?l2Pj<#WNU]LSt]=EQp<Z"%VG.J1$pI`Y,:ci8G^^l[%u[OKgC>LA/CY2&#hZXNGrdn'W5HCC=!1M5Uhm`;iq/.WaP*^%hG0NU,UL8tB9CF9LDg5b1JZE9!cU&q9A9(rHr,B3D[D17Sh<=R\nVjWWhq9,D4ODCPESY"$9IQ.>>p$BWXYJc=iDL`X-/2oW`JLh%&T'q)7KhqU+#2+%&h-K9VM^:tLped,MJ"4`)Q`@_*`oaCKV`#B==N)8VNNWI#I];-IVL[^[9=*TgH$Ta)rs7DQ%U:DkYT+q!YJAh%&hH'nW_Q-K3fI'lWVJg-;0#&Y@1D#Vk'b-2::bdZgA[@g05uO=fn"t1`djpa*0`Y7CF<IX`=3PmM?O[^7U)(f5<^fmc6TIqQ,DB1%F[d&^n.T"&8r3n@BULe+q0A5e#Zd7pW`k,)j,Ia;FEu"O$;Ds48[e]jb^&0gnAs9tg+T9rSC<'o"GJ5DpR@8#i,dMfe6fSs9:emQ%hsBYVVK\JQ(r6nWUSKErNcp#><iVZ]&5^0j-`K\b#!).Q$;k2$d@"93;Sm:_)08@6fB4cNK1Cu,3W^Ecn@Th.RO0P*hA[i88e-TC%e_i:j#R/.+0O43[6;U\D:K4K)]M&qGAir<m@2eHEVbNDUA`S2W@"(_.lD+#&AU+8,1H5^9nD)lgnS[9`8\*4ajT/coJf*5P?=@:b%&UDL45M`m-J!P>Fn?[eSpb$[q[qM'6#[[,IQXH*ea?Gt[_cG`Xl5Hdf2!9^H"B$f2cjb)TTVo$%-7O-d%Nq8X:3BBi.S-E:$5r4,%-#iIJ$#Qb\*UW_sYF"9\\;&T?<QaXX,+4lS?:flr@h"F,^jLmb,Qn@Jr!;W6VC\H^Cnmc'p36UZW,P&W4Mdto'B\n$L_9McU/0u,%;O[_)Kt"9..J!"FR^b;_!U:+?_`8A.r:F,mXotcu#u?=qeS3;a8JMZGg?K[8`A'VW&Wn6:oKmT><>7V0*nI$Bh5\]b1Mk<8<_!Y?%(8T@.`WBQBHU9D'4oZ\ogBC1%Zi1S+eGU5$m"=hq7#rW^/C]-t8.El^C]Zn-NTr2_Bo3:sPS8D]NWY>R8^jNsBF8r34muf0BroZ$%+pGDej8s3Y+$WGL`9enr2O2rSdLZEiljR3n2b$:OYC[esDbQ"$.(:S@9oU(',mq;BK2-4`=5QIM#G.T]3@+3pTGoFg#B_-OlQEPK%0uAO\?l46#d_/`!!Au2eg84;A1(^7UlUJL6)i%9ID+q?5KLKdrLl)VoF^3=#Z;"q6ri#)Q12l%Ys-<p:(nrVNnnf=(/0IO,X%3">%![Aln_PR0hd8_rOD[DouTk9grBn[gu+fUmMfEFWr7hGc":q_DHBW[F*8V/ATYEO@/Sc3)W2G0%;E@8pJ2a^]TZ"KCsGk;cl(N.L[%$AQInP%<6s\r:'T1u<FkM3VM"FR;AA07<X^=Q&GjA"B;&k"e:ZW&WfsVKGa.$I(O?Qcp'[K%npR2k]59*Y0Fq:'O[D5.&:>o:aX3%jiref8<QlOA$u*r4FQL^<G$bU0#Hn(J5-6?0R4?A81^?mp4FM*R@;EONT//sS#!^ToMAXP5AUF53[<.%OfaW`cR!m,EC&eN__gdR%Ak\u5`@uo0k'hh$:;@;i;;_'oNL'd5)b0I;'ct1SDP$mJcni]Z!QcLL/N0.8Nr7ZF:7pn6PL>0-a@o)jL8C9tMOu,FgIp'<E(?;p%Agj3b:.=14FQJXr.1ih#!t!,6`,S0E[:GgT48+D>ROJ6uCe%_tKrF%B-bq/2-%B`h2)^P3;uA(2pNZ]X4MlmHI)]!@7KLE.<JpJ6%9'4DL.2t2Z<l.rZ7LFF#P-jVH/V60^aiFrcn*(rGs(E!)rhK\#)8^8(m*#_0SdA_Gr=1"H1;sXtTk"#@3:-QjPF3hpk,t+S)7Vm:%4IO`h+PX$i4,OMKg=nu/G+^3qH=n,fW0Zs;jQpV:1IClJAIJ.1-E?3BKIOO_NFI3AgZ&-f"HfD4Q8p/GD,$*H]5F,3<rep9anm#T%@&_OT$PdO<os$=sW>kV)/Eg!,D?*PD1o*,46-TE,kmE%*8la^0["@UD`'8YuCM&o?64nCR6g@GR^&i1fd?-9qr^L%&g7'bbI7R1C%1'[V5A#%h#;qS;I+O_e<qBVGUEIf1ufP[TcoGBZ-J^Qi*l@`H`eShhqSrWMRfh<RKEK#8o$\\R$6mcr)F047jDF_h+4l"5G5L;rI%JY(Ncs"=37Yhj6^P!<]jHl-cdAJ_T6M[;La$mP]O%e9)8D=r_La.#6!StP/U\JZlU8k)s#Ba0$m#GX&DhG:]Jj9>&(#rt2TI"k7-%<u</[(-ffb*qKCjXs;f]^RBnr5fo[:RV)`OfkC)C<t_snWW8O=2#R'Ci1qfqe!ep'>l9n2$FL&HTYcg_K2L;gd#=Z:9r@/]beBf#%3emSe`&">8inNd/IqQ%Q02-,E\!V6t<$4XJ$%uQ2CO=dt?:8>e2C-U:YS;j#In$)02k*R$&:B[d:q^pln?&s$lW647Rn"2j=n"t3%CO8g]#>_m/>\u-\W^)1AkfYJ6$7Ve4)3[_h'6.ML1B5qDFN\D5YI`U8'Bq=,&?r8mAA$pc-T'lfdhCB;H!?BUT;K89^/c]84NHA,%\8D1>9eWW)KoiM:63FL$:aX\f$eJN(@RZ0>b>g["gl*AP=ppg2E?=p=$K.^9?sI"K^J6,qM-<;:.1/If*cI.K;S9Q0=rW*?A[/q6%*U]4eb'nPu\f&YQk44C_4Jro3r.WcGN;&mBbA%5K<(AaXgq7\9Xt,PBLuK3(ICV#FrU>P57Z4=(F#K"hV1WZsH'kseNFG(0@up!f%ieFGo"r<'Q1!nd3i746Ffn\r9##*d;7Y%7fhculGO&&j/kh4ONbIh].N?N=<s8/D^5qPLtU0$@Q2]`1l*VKX1J$on&,G.U5^slDj%4(CNL+YYXL\/@X'_RLj$["lcg%Ku@oT:4k3T:/UbUflhC,q-\^Y.utH0IAYp^=d`"!dO$?bDJa@'67S/ZBZ;b.*OONP2r&5AgiHA%>1_#hYu7XC>D*2*1Qb41NB]sa+JYnRI3mKa0e-HBPG"L'0A]8(@t"<'*+<^0=[#>rJPEc!F]-F9dfX:0B+5&U0Xc&IXGO?2`_p$D%/6GYI;%pc]RM:D@a\k#AM'ZbZ/afIice^=a@!Wa%a.=d'RQ=FE/Qn/TMZXN&bdPVkD378biKeG1_?A"$1<UC&>+T&/P1HOnlTI%.%f">Hele0``@<'@d@;P)10uV4lJF!)*USXZmC#Y2>rsD&H=`g)8/Ji>?b`8'pQ#/?\LM7ecROVM,:LtX*l!J?ELil:;:RYpT9I!@a%66Hhd:c<pEGT$ku#,IZ&Ui'3UPepXm+a@=oRpRCBFUqiUmAmkWb*[<V76)),ZZDR<,Akj`HZc3.!i('uKaB9#DD8%;7Sf-No]2rp%#A=A)@>4BApq=J$.,Q`V#mP=Dmdj+G^3JE(l.XKD#1nc%-VD'tA\o_sMlRC9r%^E#nY)^%b[ae7RF)Y$9N%*i?0VN2R5%F(/i:+L%.W4YfWE1ODWZgrSg/ao9]Q6*dIH%]^>8.5b(WkRkM?e7(omi-faW6N-;AlqpA92ko5!?Td=P$UHg*frt8j4ts\$Gc/_Fi>BJpVBI%.]&!<#dLf\_M]9K=^4#s0&Q@"+k!Gi#L2VV@1kh<A.>Y8>0,,-YYQ3cQD2k9CkZR):-#*a2R*)e3*<27/4np<N-._;&jXC)8gg8W%ChaGN%!2Q>3$]Q-7)r&`"A8;H]d%\o?u]g-<J\r;g,dF,>[Zk)=aAhP8bSe62INn"&eTemZ2mCEXO0??HY+s8']4J]D)\kAUFO$(%.i^)']oq<3@'1NRnXM.g,scA4Njn3k(?lVu,$;"jjg[Lm7a`8/68l'ToW;9dKN1')8Ff:uZpZu?&a-*?)f<,@aMi2^9<YL7H*U>&%;"HPbA_<<&KqJOKoPcgnZVc,eZM1kP7`=oeR)mh'Y7BUhOE!<;mSU.G:m`sighC0A^[.gn/neJl"%)*i"V(?)1PRPCY._@!52dKM%AJn'bgc*htp1BuWDdg2+!(IStiJ6'EB_(XujB3ADMLslS)C[UXR?Pd_?m*'8Z4%(mkOJ$+.Cd]k%eQUS4@r(X/GO3"Gj'\+NeOb^%V8al<50I_rdFb8&UTh\0f:OZH3E@/`>9$UKZ@j$I)`Ki9J(P@"B1WXblYXE_"b&i^NU?VKfXA';10JF!=DT7@>m`EiS@A,@m.`("%4*Yk;)$".G?rY2H,j+d/^HX`Toq5![JVth`Yd#FfH@BSkka\a@"KL=*^VpRR=;&&5:r>*_]EW$l3G5pAEJKsGW(62g9>ptaY]Rl>%oV@W(QO#UDY4DQN#.E_]N5jZL5dc?Xa2ZIS\ZnP^"'&VP3j-IC(G5%6Po,3+f2SnHZfC\6061-lp]WI1#f[uG\X:G/l,>Yi`QejY%]S?*[lZ;GYGaW,Ln5ffs>7:up'3%quf)tKL'Y9VVM\i1NX7FDAhjf2S^,ZNE8SmKcjP)@V:Ks5'/.kF(PiMhog4eDU`bYgEF!(Zg%,nTjL2;As4A,g,OT)m.l#'U]O=SFl*S>'X2'+$F>V%0k//3)>N3n3*u(=1E2-:2Cm,_iLR#FBL0ns%C[,As`LFoF*9V[o!)VT(O+%\3t<\OT]^G\04G2I(t6mX:[1>K4)I2p:5q,oCW:>/3,L'fm'(geRqm"Xpn]+29aD`S#]9T!hHZHg]cuH0%*B#)X6A!Gt?[7,#Ipm%%!kRdVe/gV[(_XIX51'1^+rad\[M2rH_>;Y5MC>u1g`^fX$o&TH#qI>I^9:>!]3<I^"IW#!dO$AMZdW1s5(ZTe>\/G?qj4%NuV3J%eDoJ*/[?*<`Q"dK72F=19akGrDC@6e#3jR<(`3n74+g_"Ys9=V&1pG(<=<LbKj+("!UMtnDCp&o=CJ[_4G#C!"ZIc3@C-_^IL'uA%HT$jW3pgZRS<[ot:0I3=HbHF_ai<nN)aiL%pEqSiai21h<:&"[@W5<<;fpj2.bE:f=?#&\3(]n2;a!]U&k-[ZA+#T(J-)`T^lLAE%ZSiGV]kB!M2n):gCc7`:2JXjC!aSgX$\0^Fa$oukgteplF>,V-3'WCd"Hn/.^6E*6l?XL1%._1h9a;^LeuNUj5@2p>>:P,e+@mZT%THiDN7o`pW-;MRN8dtdRi;gcg`4]U]#f(-e75Vn,TTlo0?$jERH#CD/Mu`6oal=.E@'<i#AeFj%)keqni<BkgGiBLiX?M//i!.Oe%CFe#\*]JG5oje'JF(8=Z,$q-5*.Y23</43GFFA)BS!CQO?s*RdM:4Y"CfP@HRN_JB@>d9OrJY#T#)eK,NdTlg`A^NCIAI]W4Vr&T%:lS-qQ0P?S]gO_e3j:OL0hsO[%VSLikDN39Rk"[jFk2G/62:YETZFB=L.+U<EJTUG[0i_b5;t"Nm#^,(H4tfhdU21FX<oP1X+'BM%<X`B59Qn*(7X&@Od)3#AR0%Fa5m:/K#**/%blTY/Z`@+2+u%]l8f43(7%uEIWRF0,W,HE/OIArXFGd]@D;Q)?i`CXtW*l=*ass3-%$'f-SXHddak#G?[YeX%\HH?Mrg&Q`23fC%@3%1550[i&Kp96>5WUj.X69(bAeRAr)_>*.#$>+.hAi\_B_;mche3RXJW!pYcM$2-I%?ZS\0[=4*`[]E^kdq??(<kq(mB9b&ADj&&OcC,bS68[BgVsH[SM`&_f<*#?kf]sh;^1::35R/D@3XYLE&f5e$h-!<D<!hFN"lRTQ%O^ui'?.jkf&T!,&oZfB!L7%@1n?gt0PXCB6$t0NYQ4&um9NtNG1h$X^8pgD`BqDI[(^!\<@qOi^\]Q\4nQ&;4@`E7Gdk%^F$;cY>%jUK2XJj%!aV(SXOJf^*EX(/Amqik'R;hSB)0.Po")+>RUa4!0<Md.=DX9TI_MV[&80G/96N1r?@Qmjk4%p3GoM_,SkCFketLo(X=%.9^I^$uo<>pP_bC_9#<>GeMjpJ]s8c@iCtPr4BoV$_e<`]B\0*6M]u@>)\#2a1VO3<)mZ7>?:[@l9/E[e8;TFnek'(DmQ6O8nu3L%)P!]j\YM]FX`]YjWtI:IOEOTEY/&h&'u@4(\JR'co<UQO>Sf6g"a87:#*#WY+TS&\6D0X*c"#_^;C6o8/33*qP?(*q=j0DUUK*G<%32&U,YEaW)KR@5k\Zf3@f2t.]@Y"e]9<;B%j3k.T5[ro`bZ5q0S;nFWN%J5u>3X.%J(:>=btA\m7%G%DC!^O5_KLk6FEOQS!d:uJ%TN0.\bT`J;7ETqqgagS%R73/mr@0;)-7aJSQXpJOB2Hb^LK33`81Kjc,u\BP#AF>lYkZM&7O_$XXXQ&/.LUU*kqU9%@VLVZS8:#Q%j<YP?oAi0.8I^XS1'9bX<uS-R?%UrOfW%JR#V2<BBF/ERDkh]fR`RkL_/4W+X.V-!9s\(V.k=]7G3eF.4^DD_>?u2lS"*d>:<u0_%j&f?Ys-4E3K1:\`LF\pm\C.GiP0Yk#"UK]Gj`2f(8YCS8@ph@)-'HHR[WsB2cl:5aba_2W94/<1R'*,h$'Z^Vq0Ze62`#bN;1rHa%5F+A6>>!S-QEoL,SoQ>*8kVMu7&3[qJ'r!X`DfOYo(s]'p1t!k/OQ=PcVb'R)9$9W0hD;$`G.2oaq[RUSf8*'b]H6MVdN(jSf)An%"4ERVl_:#J%OBOngG7C+m[pk2\B*C2Q<jZE/(.]G`BP3SR(TE!7Hmn"2!UQ?"Btq.aD!8Y:Y!b/\g;,=Z`nUqo-e1<B-V*[^UXX,%;Y@&pD@i[DQW6P3)0K'ER.E[&&WE,3L'MRMB,2'/0'-PD!D<2)=3t3?`GY,(lao;uStS,R=A_>WV`:=+b$d(l50YL6XLG!3h1D_'%4H23pEB8._6pQp,TqlO>NF"E2E$MkJ(uVShhS%_=g,?<A$%i9P0%%4<[R4:[gBu>nbcGBB,I.EX&Vi-:$Xq0/,f!5oo2\=+)bA+_%5+-bPmoNR8\"OWaiA+1[-tBnH.PlQ8?%]jIW"mhp'i?:;A/R.;Xt_FW,Y9Mk<ja1W]<r'PBJCkAbeBH3JkjM4<I)0i=QH\\q23g#%AW9fiArB`5<^BL'l'PW)R6.i[C+07M8DRks6hk8a]?#SqUqG13Dg'S2W"\\HgtZKL.[K4t-_5'fX$l5T6c=!t;*QuBQ5iZBeg+CM%`Vs:^p@DU\bp^A:j^)"[KDMT:Z620EoM=Pr.'B#.k:^_HRjBW6jKQnTr-!m%\sJMmUDBkEP1;)+^+cpQ4e$(2Q)UdoX5!$,3?MZ)%b;13%jVO+%I^Ec6%?DN;D\kc@:TGEC,$RbUHE&1<>SLF:]o+]#VKtl)!4(agVkbO003LK81A+I[XD/@[6q08F.1i-ZRUr2t]b'8H%4;(PZ:1[_;WPDiBdji`h]>So&j\FmjjX2j#B.Z1m2/e`j[Rb=_h%"im!n9ToO:E.q-'Uud\h!Gk=#7>33Y4`dSAfR-2iZS:l\*.)%q0?>P]Nbk4YGt(XH_VS6hNSY*qAH+@SFXFt"\Wt&QAYqGVtqcW&t4u%?mS@Rd&\eE`[eSsYO;@q15.c+Lp5Mk#,p#o7X6/nm&!M!%:-?'+,a21Y.10(.@%2EsZ8,nke<X@K&t1/rL0975$a*'X$0iU15e1"?en<+a%4IWEqB"%([=al9%pF,#?8'p<++[+]7X=)EBMY@Y%9UJ*?9F8$lU"4d!Aq,@p<g*aDHOF$oSTiX-0:Bd-b``#3QDL0@/]M4(XY>rG68ZdM=CdSK(X"?4"JFFD-"T+-b*H0<)A:+"`2'G:%b%Q$`"h[D^n3sdSQBlpu==3@C\ll8'<Pe9-6oCCDBu(uMEg\]hZ$g1!Z/topbH*<-pb^GMXK3?,VD-paai]d%UaTC.?=`V$?SAlr%T"4r:g,(&>^2<L9JYqh8i/2@RM@@\kXZRTVJc`n%VJU%>Qnsj%p9`LR/IWV#jd$cnC,Rr&J[4KZ@jP@Q3XoZCp*>fI<e%@a<ZkiO%P>u1X98fFFU\62,hi2]1=i\NCH03DEm:R2iB7UT:D,FC`rJ3p2kgsL%3T^JHh7R#+%'<K]_WSaUq^%Mk)rG1ZZ<=^'X<^^AoMF%&%:Eb=R;).acB#OoIY4qE8cjiW@eR[+Oq/c!@qC@\-"t>6"m@!@Qe1%\Ac4?]WOS0:)]^+L[H&CE\YM3k5G\(Ti/V>?2="OUSZtDuZ%_jfXJg['g32P!CK"j3W%$Q"5s.B)ihh("B3cOP1b_7"]-QU*s=I7o^`q,S32)pS;e(sWnYAd+ZdMNh^8A7EVUWUn2t*/`Fc<_5FX%eXVLh"PNn!nF/1``XFH4>$Gh]B@?QuLB5^!7QdmdF5Dep%#eCrKhECJboLB&04f3moSQ<QPn,%ue6)e%%Pt(f<d-V4O&*bR2[VWH%R%"iP(8*)8>B1CL2\0r"FYEg=I1MboI^PW*o-DnX%nSs$[=U9)*kj_:9R/YqV^\@-IrDfg`5PeKUS`=0jBO&e>$;aMB,fO4gYai2%H8;OfhWCIM4nC9YM"8qLn_-Z;>XV2EQJ=*ZN.m\]+*`?/Xb@cT2*\l"'UJrF#+_%tCVNTZaBK61c@`R<M,K4f?DO>:C-fn;:0h>u%Gd5/INd"(oB;o^F<t/>>#ehQ"E'gneQ`Z;(2]!&W-;?`:)s80_FY`0dcuqJf2<qElO<h(fVk1j\q5W`9*]RC*Mk+i%.-WA<&&>9m%m8QYPh4c/'-CY:E(Dlo&KTP=on'bYn8"BoqDC_pmTN5<@:3kEYa.dnQSYK$a0O8F+LF.S"?;Sc<B.kT-(Gu"pk@E-&>h"F'`JJkJ%>atjMpj!F%_*uo1("5`C4QiWX,2Qj%6#fq\B-'3mZZ9"4e'!ApPS2WHTsX-_4nEBmjo\;J#Yi8D$r!uujQ5YkBsfQ-MU3jS*3(DU%o%$,<Xj7F<L('c`L:u-?dS0)+=,.3'RKY6^Vi,$-+&^e:]]P=&9TBRA&$RBSo33\J3\7-^J_b)J<``:1pm,/]Mds:[9D!bBBs`Zu%!E[I=7f<V#q#Y@:KF7p1CF0"Ri[>.kQ=td!9<1pr=aT[^K.KrZD&saTZ&ohDRP31.'Nk7FZU=0]!jji)R9MCL4:c&rWJLUL/)WLb%KmCZrNhaYaaBHq7nEF9C)P!cp!jIi_h89!-1`!bueO)Pq%!`+n9^km!A"FJHLqQJ9&UB(3Yp:2oe9&pX*3;u(Y8ckQ3p&SgUUPRl%loJ2Pg#t&p7+C/FP0OZ(.Md_GQhe9,rQIYlhc1E@[R"'l!&m$Z=H[K9<qT'o?Ca7?KP"V:,\O-H-9QWCf4SEiBQq/bWe&TjdW;4!%O)Hg<6)k$CXjL40);lMr;OgAK4-d&YEjGPpaPN8I(jo:Ll/lPh/LTZ4_9EqToW!_sdhM%Chb'(2L<;Sg%%`O!l]pN4Nb.?4`[GIl%:\-UnM#%af%H]9Xl'#O-8e*ICY[6EAomSW!?Pq%\>8FI1ncF>IaU/gZ<e7j#!7(KUKL6FUQEhr]&tETI8Rj/8<p(,k!ioOd9Frck%j@oN@+X)/uO7T@j)VsUgdE^(MV[FdRE7e@lAhWW_Y&j\c%AJRsb-794!FR$/mXZf@;M7=tBX>jp<)ITm00aC/3tQrtDVSd'TplN,%KRK7+<#/1:G1OM])6:b=fC]UoXeu^ZBR*7s;)6a>4E+G.Vt7#F/2Lp"Mr<+JK:RGMHXNbSCBm^P2%qAn/<8DcV:E]-MJX4qb/EB1%6Yu_1[`b2jb)dp1R/p%f'RY7`_]Ok)_ViXMj_*i/J4Rdo<uOJJ=q>"bN*P>AKJGn<MXClrJH2`t0WuUW1'S%a'k:@:.S6"]f#<nL%"7H5&725#_fTsKFaa+,HN&F@;SS:!gH?jTN#pNd6$3?e0.pGGW"0/.-@q8t(7$ObmZSIOIH$`]%a9er/j1J'5a+6]G4]De9baS\k%jJD!(/;,`L2/Ka8L:,HdUp;Dql2>C\I(o\\@')oT>8>*U`X4K`%_uiF[<09;1RIc"!k*k\)8A5=)i=ZMf>a:%**s]G&@q2WoT"Sl%/[c:k0`l.t\8pn:RoNFOM(/cke,m"o/3SF4k+5&jR,`ogE48k<7nlZ=Jmt1b#?c,;BA8_(jgj*QH`6s-d49r<D-No:--W0[90ARM%j=@@7e`%WD"r`92/j2m)e+!b75d,7LrI#Fhj#c?@Z'dG4CVjI>VPDPQ'-)ps87erAV<l+4[N.hd.h7+f/Zd/e/N73H!=N;pPp1Q/%%Y%O"WhGmWCO-;+j0_sR[*9Pa:guue"\[NHiW:cI.os)XgOcTQ\0<k$-u:$HE$4*LT@dU4%0;-<A84,V264eOEZJVo]4L!Gnj)"<%]-;EW<eGMPT#$DrT,;3tJQF)Eblfq:ee4nK4DbJ19Gh0'!XjfX/(Un(4HdKshC1)D7TRRU8iEX-APmE>)nTc+W8=Fh1J<4TR7;1;%5tWL'?jr1l0M#1)1VqqX-GqaY/4>K@=mRc9+;r4#?rq.r:GuO_\&]`LX/VWI&U'_H=/j*=P>E25,.XUQd`WBQ`_4N)kpqTF>?t;4%g2=CZVIt8465Ho"(Ni:Sbk#[HK/Rm)`MC?O'Wic378MF+%T,0Q=$lOQ70'm4h5L+em5-KQ@'Fq_PYACu:fSVk!t"7OHo_jEH2X)c%\c\V^<Q7'i#-=o'*3$8S"c_R<);ZLO@#R2=klUr'g\.5L!-!?rMJ=[+9U%eeYXsp?btXd0/H"(\fGg$tL+:%TP:JkO+\9Ee[Z,/c%/'J[m1N0O9H=DA>"O=AZ8?StOqS__#QufqUZgtb08t7WICEfg\_kLG=7$kr22;.!aHr-Hk,mqA7+_OFT`kFL$Q$10BSQTZ>E*CLY%5EAh2Gi-CL.qT1e=Wr%'Na!lp2o(mhBLV?PI'\=j3cmR`Sp%HV\M5Y2o_mIe[Ck^uWjqi:#L@_,0M#pJb6nRtI<3*B2c@;2^,ju;%f3?04UUfIj]l)&]AXVK`DU+7Uo>Hr?kGQ-5Mp7.IZ_\Ei[^4i&_L"OhjX"DrH*J142lD'/Bgs+[Dh=[Zf=i=@J^_:qX-[!g9N9=n%0iqRjW?Y.p@I_C%AcC)s>.a]U7UER#Gk,6jardfQm%HAY??S1b<s()9jY/?^K:Djc%n:Y4jU(A8Ci-<Xh;4`23,,&V*Ep@S$i/l.%^2MSJ4Fi?$#V_%bDR,BDbh+ksLhSt[.2keLk(ordF48ClFVA*B@,d;cJo4#t#&YqPk.F"86q;sae7OkEFNi=HY3;7$B=FUF"1K!c%I\J&=kQ'Hsjpa6p5la-VDX#e*-huhX>GlrPjo8H"Y<g[3F>GG*0+b[XZ1hh#0-T*^]70JHAu4o)ap`e'.SE00,XA:WU;>3J<%\lh%nm1i=CA3?ZWB$_R/NTWpS9`q*2Z)'[_Fhb#[i>IJ=Z4>ppCan?QmS'+XG5T<4Pm/%dstW8[0jm13Qemi*.;DrRP(4q'FY7F0H_sR%2+o.kH6I14NAGN'Y]:T;B9l`kXYh,:@jSWG9m\XNADO\'="t'i>Vl\]?/Q28bN22NM(<&;\.IYLQoS<g!926$.^^J'cJ_\R&<O7Y%:luq;Fd_f/DU6qdSQ!6fn[53<@F5GJ"u]?(p$k^u6B5[P+bX.=mF>4HSCM3DWc=-XkZoC2R1P2dBZ#t/bU&ED&-<<K><lJ&!WOX(%-S]=:.pPHGRc%bIjF8lCRhrZ7XKUP3\KN_XLS?e^g0M9)eSul3VBRudb:ru6m.tL3X3nL,jK2QB!*V]5/rs"Nfp0[M=d$"'$*:#C%Ukt'lM`i2SYo%U+?;5Jm>3&\VFU0p+X&h^6]_PNq3k?OInRt$NFD[<_f9Ab?=DH],+o%rK_4o.4`rPp`gU0s#.W1s!op'0ZJR81U%]6NuWUnKo$Bs8M+Q??7*Q="LHN/VM^7*)jC]:p!p$,T_N^EiY0qd]brf^tdFS2CHe?n[6n!6oP@-rJhR$FEu9$3m!%>R?]t4TNnk%=gb4Z$d@1'LuBi:>`b>G!@B./>?LG06dt83C:.r^c?R+q^k.6fUaVQ[rO_dZ$hM#kPtN)0>Y,g`[Hl?5M=kX=h^EfS'bpj!i]dFI%C>!-Vf4m,ci`k^O.C^;(>1/ghZsI\"$C(F"1W;b5h<<9"S)lea`%!\A(\]X:cbcq6LH)^LH$j1BHF7Dfjmh0,"Os0+iW2EBSjfO^%]jLYh;mg-^Be,cIiFZQ:CuUm+9^a[NNj46W+\B*:#WR'=SOG7aEe.>'-DQQ"@M5a0I=V@g]ZcSF0<nnh=/tCO3>b9@Aa:E4&\%0c%eof*p0%_=[D>#5!A+%[s_?"Lpjagc#D-pJ)X!E"NQsX<d0<isp@(sXZ%qhrc[:?+1)8dqP5gXL_^oka?9?smk8XY'L^%I<AJ"<b]%4(+6Jmc8fq&=I(?jD_ef-VYmfpVZ)5dB8*Bapi-?iK!KN>$`-7$ZgA?AgQt]7>2Js3[-AA%5@V[9U\2\+BU0S#_iG7TBMBJG]96k%@l_]dNTq57@p+?3&Z!(.(+>UuAi-htIE3c9&,YGQS),-0]bY("_Wj97VVr7jfE+"U,%<o/.%+EH[B/bQiZQARC1Sug)X!reGeR:=%+M`/IVHd@VTkje;ZI4H9QtT.G`RRSlDB1Qc9qIZ;.8r^LkM-ACV1q8&+DS-cb&Vh.N(tlV#HD4JnWXHiE<_s[d&PV72IPZ%X79U"%1Qj2EbP?PEo+p/_ceJ?IF*_BuT!#9?40\ff8cI0^%+a[A,U!%=oP@pq01Zr/,S(`P[#tZEgf#-$7W_d,8OZf7f@H:%P.MH1JNCRs%I^:fY-dsI,V9-C3:k0Hf$_SMU!qc288J7O69Q8Pk%IKDe<bC%9&X9R$[=\ou(*/,Y^fBK`B;7cf'ojX64u&4!;#kf`[!qCK<)<uV%"4!*ua6DQ](0LOR2)'2k2+kAbY$;&"">XLi^`(g-o1%VNgC5mC<N]69drjXmeO8igWmn%:j-`DAB>fni;6T\rh<npWP)ed#Ec9/N%YMoej-Dt(a/-.(<_^n;-5a*(sQCO?`BK8n>m0K$gRRpY*9:l2AJ/iT>T1a&:42CI/,WnGVRtbt:o_"`-Gg.@%!NSQli2l9O:rT:Y%>m$tOC]O1rEF-F[oa%e!RKEqjR[>bUs)`B\\6.`nZ!4LZ!L#Y![Wo+[BE0@eZ[mGkU&b?UQ2u^$lMCXhj8mi18HB#GFD*O`pFn;K%q7+Fs!,R<.GdbK#TXi;CH9O"Tg%>*Y5UG2BeuXLu=3p0-9\'4GI'@[qD`k$o;dn1E-jD6QPX(/<(1?7?.Aapo#;m1"50oS[nIAs,%Z\/2h4C)<^D990)9!c=dH&AJ8GG(AM'PO_XO#@*u6*sori]2oEgRq7k34G=L.R:&q(tG[*^cYhQA'GK?8?Zb*$9PXs2(dZ;0VqqS%\R_F..%#eBXRliFoM-qUX%3/$SeGcg9&F5XH3*:C!aqG>@/9g&DK<N"Sh^C/#UZ:dlt-L7-$[#40\\<cGrqRmXj%$uN#K53NMhJ9%_Z1%o"OJV5i2RAUE1>'[iKGd(B'Lk7L-d"'F0IU+lePWgGrM]F&R$@pXDju$f;,GfR?l!I%0DQ;?5%XLLluUEX4O#8QEZ=?)rLSX%TIiPL]H^P7]*'(WZ"^RRc+8c8ZJ4'qS8.-(mkRt:C^&rRZ>;+oPhjiFTjej7[X_u+ghn.6<iJo(/b=7nNO/j[*l,$V).4Bt"lDX\%6#\tY+Ob.u2L,B6]IcCKR2"!dmfdeneIC,YJs3/<&7Ye+.b^HD_DF)/9k^3^$+B[hc-#gfO&TTON(]V?\?RlZUUKcs=W"$`]W&LU%.[fIYmC#=)Y"Z9A(SUm?+]E-]pIM[?PaN-pL!2-$W"9SS+`Ye(&HHm2>6c+7)kg$M7FECUf=(V+<CX34FE@-7?pt8!B:H"LDSq1&%V-X:[`kCte1-5qKcr7/O+uEhrWYqIM#^<Dd.:AW7B$C;VV?o*,&&>t*=1IG[QUP=]g02eB]cN0]BAiYm+<"hn(o@\7OOR]m.L(2E%b=uta3L+I<I3S*83am:qZ;$]#YR.Lm3SG#I1lPRg_8o12Cj+`.FKGaj&2`#O5`Vl7;DnU>L=@b0gqQF@'U_eNk&i[LJ`Qn7"d>cR%>\HmUK"W<eZRE+uW],Z&T30KDR*FDt.Or;jUGjq7/PUGZ(!Wd`@QqeiA!2(u!oXJ=>MGGs@@]Nn05)n?IM0Qh-8PqS@+ifFpLO;G%I5c,7A0s.-`cJ&C#JlrX"V6_e03/f5fO\-?g+#4k/E%<aUuffu4t9CdfMke+!&SOYJBaYr]I?.^k-JbqS.M>2RHFGU!7LPl`*Q&"%go21Q3+Zq_d^Iom1Y6SkcR-)2L6]lZN:&J24OR:)GasK,0W@Tc=MTK$ai6V&CL7*UWn$2<4C);2Y#qAi/;?RHUgdfLbNAFg`IaB=%BO4iUP.2DbE9Ci#-a.$m$G^^QEVFf\W"[@73c4epMG7k+^f8:MECics[/#"]57KT[PKpU3.j3$2SCpRn*)rf=FTHGKZ(K'-TiX_!%H+#Te!G5)8@'f8nMSsmk".Lb\B.4dmg<ZPaJH)P5bHe5d"c]04N4E8oRp_^$c+p-9W%s&^.OlT=94(A6$1$P0RTil?Yg"HO4Y4U4%.<;sM[?t63o-sDT_L0&&AHQh-M6:<l4?JrD:%sj_b>_/ehI!M/GqBSDRT8>&\3UWR$?XN$pNbe3,3KQnI@JP!)eq)KI=_?pl\iX1%$M-Sn/%GUqjBXN02,!`FC91MC:*D2@+FtJoZ;9ICIfad,3fPUi7;Fp&p-8i..QG_+gbG,2Y*3RV1%@:)<lGjt=5<B*7?'%<#PBR8%acoir>#=.UF3W2X!CuG92$_hGb^q*WVtklE&$SYA^NIoU[^fRRgLAYa@`-_bGe1UI>Vo4i1>F9dDD=(C!BJ_A"!4P0OuRKP8m7sc%dYX=m(Tl(5g?-'n!fS[+`D\=pV,oC!cOMk;)$E=%;7'JN0LnqYJQ@n(7r)G/C#+on(p*<;,`f2,`OSS5^tW`I(RRefDEXC(@#`q$%I$*1ia"A#[S`eIKoKQVg'jE;TNmHP,7`Tl7JV*:-U[AqeSH'9;(V%HF8gsqLbc$'"`fYeLh3"P/ctQ,d=9sk.gLH[T"fRaIcq\Mt%`7J5QdjETYaL/I&YQCu'$S,Eg@%8M+o5#:kSni15:p&3N"@hc*ctm:oqNrm)crE`c$(,uH]lqO<1=rQWn8s(eQ8;4<a:dc3RsiM<%Fl@`ADB>7_8;T7haQ+gq<:_F\=hZDZ`Nc7FL'=5V*%&J@1V`MK;?<gm=[\jOB*Z76-l+!LYKC8Sne?&3'7oZmF^\1:SL.l3JUL-7%51Sa31@s9$a%?J:0cgA($.QV0OY<TB@4'D&guCN'1iI&I'jiT0e+K!ZoO"X5hT?6e(C='!P..`f]5ai\eaB=>P@89&;(!^04S,'S%Cqs9]FD5o[fi"n8Z\&]\F+n,8"b==nK4_uu!N0;/e+[%V]%a$DmF!sIhnu9L[;Lk``T.<7;3;2/cb">T%"Xq^b)Kfq?id1)3sQ8G%dI)6aJ>]HknkLD:ot!H"FU?J5]t9_..m@\s/2\5@dh:Ue09mk+3\ukb=)!u/gGTUrhPN3qW#VYuWg!;ZHri5bE=^heD3!/qlR^Ri%)1<s^$fC@C!o0:uND=pS-`&V.q3Wr-mn6H(GMdcJ_1f1FG7.772K]'=8NmLt/"#8u1i5*NG8<T5$/?^(l0=Gq!_0_S3(V78MCW`K%l`;e.Zo.u>IhR;84?Y]J9dh\om/URk/C]VenIe*hFCU<Cmn\J2F%:*WJ^&p`*gM-hZ]*@b,Frunr6`s4npWZNj*$QYNjWlC/A<7O%CTeE;DCP^f;1XC2P4*Cf!]1JK0cW4&/0b=+m[MUD!E8iuAn;aBL@+@ioKQVg'jX5@Q4Ca8HJ/)%$b'Ca5m;A`gH>fbKgHMBFB9c7%*Zf%H3DHQoQn7WRJmXoU<@qI"EB1#$.+g0,is)7B#r4VeS6`?J5W(Y)(q,(?m]OO@>G>?WW\k/k+D\;u?js-n4E4VW3VL11)N>2J%2+JRkMO]('qbH8OP@I@r["K\HE;t$.8N-N!WXB"&MX)>J.CUg!UhZ/BbG4emnhs;N"Rdmg[BWDU/IECR*?3N5L&j].#SUV)QBal3%fn!20Y)sGYojru:#0&Vi'89UuS+"g'fu1fGaP`t8LY5/^A2/)Mc`:@T>aa`Y)Mlnp+@/uU.;\8A!627RT?4XQE-cU[3DnU[dYC89%]"U'Ek+/%I@DjUH#eB=RI3)fjXj+X(a-]=HV?>7bN7O,[rnKGL7cmAN,Z33mMZg<eF.9fmbt'G-^Lg!+AYK2^"+^l2iC3n0jpMs*%;tPqJSQ9OBU'\c&D^[<)VPp8SRjXR)"CH%ZCm%f&Og\kbiUo;GYa";1<Zr%$Sf,SU$nBbQF*.e\Y-6%^gbd9q')51PV5Pr"qRo9,%N'uJ1Vo=uod*iu(b@F[&ZpW<E-.@^$d3gVC9m?]M]'5ptJ8&1]gOOT_9q@Q,FTfE3_!)b<cSE;D;V*>'D/YHK.n^(_1N-,&ZU.7)%e2L<?4N/.sgm70,*AgH>*4%fd>Y+5RYQ@VP(M9pr)%X(uhU?S@0aak:=(XXV*CIdqVFd)9,9b@r6):#ML@j0\9*3=d&oHqJaQWTD%l=t[M'rTDbB:tm9,00ar7,NqE'QXTfe/s;R;%q#J8@9Y&aEZB`E?,/"-G]mu5O;guQ/Qe!MlEb]knZcC@<Q_@($n.j?^,c#=oq1H%1sL3FTjHDdVL/[gYuFK##UdX:AG(>=8bHOTo,:5QbXYIhS*3"JGs9HF'>)%ZoDHfWeC%A;&,F8Q+%jnHFKg;/10^U_g.c_j>P9\(%TNf&(Gs/r\:1m:m`rmBA%766(LNbb36nin3JgE7CBr&!,-Aua,R<a4(qQ';4XsCQ*h'[5F/LqC#A%`gJi/O0</3oJMVHX%:[8>f]%d*+TPBf#7bf]^6T\FKB:6rnM8k@]iV]0C\X"PA=HQ*I$s3R5e2Wlco@cAWuPN>\_0d`d,LpF.5Hfi>a;Z(/i92X95f^dRo2':Xom%!Ccq]>JeZLn:,&Id+Bf;UMm;rpL7ld>;.!5M<"CchM%3TFiJ(kK^^ZtDddjPpM(q0#F;kYfAH:VM./n?\g;J3R`(M%EX8qBOn[K!%2Ac[[lA!i@9<KYq]p-uF=B?HDoh)\>4[M'Mbb0g"`,3?=V6KG#Q6`i*?4e+I.*VS_6I*R#>a[FPU;2`u(-$Dm"mOsA>aOc=qNnJ\%YHA&k'C6Y'*B5iu!*C-'.qXfCf+JhDf9]DB'3]"]nOo%h7b'384<KC*7#X'kU`+J0n9uV-7.:)G/R+7jmX:_A:l+/Ne:TU&DGg**%k=[K</;Y+f`*LKh.Z59#fQ@$qYZ72c/DM?to>B<rTk]B.pZ>VC#j\gR%]6lq9B9ZoLSY*G[CL\s3`)20[.p-r:SGZ>%/e=`W@0CW%6FFW:FL>Lfd'',(Ci5:cA)'QI]FEL_-@+Bb4uA>;PiT:7.17h9!Y;K@E?J"'nU;0$_bCm!m]448e>FLg2*@A#*Q%sE\JSeM37BRN%Lpu:ZMf&3h2CkrUL;>2f&_ci%M^/eAZlYn`.<-$o1(s\'\K#=nM-O:nc[3WA:?JU`HW=n]juZnPQk8H$gcJP5(quRn09>Oj_OFaP%?=bJB@1a,RB%BJ&,jL0cY"Y=&IW*i`?!3Di_fktJV%VS0;:2r6RKUU@Ol?MrD-C0*SI<67nGKbsOjN&PQJ3X(0#QrWN_5]Tf@"gm%%gH)SCW\RF40*6L*Iq%U-9@hQ77g[Fdd\AJg^mldN)2+N.Tj24e-KHo_dcb8":t3B2`6DOTs@>IMI:*d2\`(<QrB#<]1)Kq.GH-)%>alT6H[kW0&)[dL7RB[gK9f7!X9pOf&X?@m\[dpZ)n()7dc@M)\O!Rq3fEmf<B"+s8?mCopoS=[/BN?MjOif6M2ci)b1;`<*4mh+%bs:.`Zk7tOO>=AuCU^d`+9onlr<W;)lXh=u8@_36.19o![F-'FW#!)GDh4WT>%Td=ksE4H=,c*\G5]!_n"m</QWRs*4lCR9XuMH4%27aTWa;((h']XXLMh+u,N/N!=NFls_Jo']c=aH<j>=(@0Gl]S>7[[-Y=k]BB,%p&XEq4IdYT/XEHG3.L+Q1$5]l%X0@m=ltcNmnO%G+ZqZ7\$@$7uNL$&YV,ONCT[(/W<DsbQi8,,B%a:gY`r5K%i2s`$7+L]tIUmOEa"*#0$fiab4s3CVCA8hI?5[j(5C\@D;>b&q`cZ%^1f1ZIFCO<(WT/q;41VL$Fts<Z`N&CZpZ'F]<lHA()#Ks%ZVQ=V1@V%3kcE%+u)$h77Vr<T(h.We;L^>6Kkca&/"=E'K2.*2^h@V%SqVY<Deb#TE%=R!]j>:,e]7AU9@2ArkoJARfg\F;f$#'pH..0Io1m.dX0`,Pq]B>&S@_%uh&F*DVY/>GCh%+nMA2bj>I_MS=ju4B%.uf<FWp2l=h'qs!bIt2bf6.7jk[<A7,7D"qnONYDf$W%mTQW]6K)ps3r+;12F&h!J_OO<!BWc&]\JFnG5#H&^6ql)rTi5S7:5-p:%c%JqnHK\OXd\0FIKPApiV=`VijUkJU`"6b7[5N$UU2kROGH[h\V=FSopS>K>,ff$Xn37?NY^m4a`47n77Qspp2K4tj"O$6[Ma_"^%ag&d/3("+0dON!q>uu6r5uOc$X#pNNA?reX]=PSbqQ-\RZl\V()g;\6$O7*m+:tW?FI/M'JBM_8Zs4e%[BR=S,)PBXEC5.T'f0Lm%GrC*fVK-3``mCDW6!^e68&[O'b<q1Li@'X:0+tlg('uX[3$E7#_9UCn,"XN/&2l14[F4%r4ol=Ylre.l;,47k)@WlY'%uFcYe6t]%?mlQ`-8@@nFD2pWLXn^Fi.ut?M(4Ilab-h;#PW+^c68m7;cg;OnAI&%.L4Z3'?jub^Vap3P)u`r>"'AI,-b'D<frd!8AgClZ8c6B%0g?mD)chRH8S\BcDL+>^oD>4])[oAf2ScbOn-"95Peg3t'%jSOVSE7S9@970FpM]r5[9_mfj#6f2Z"h7\F"JW%6fDR^YL4"TH_t1%"YLEMLl`@c<0(!]?m`>?ZNd&Zk(KHn&X^Z:?hVZ[!JOflUD=]u=^k<\#C^ApJ[%7p*0sc)3X9,8=?QLI&6rL;bVtTIobm3^d-7n<%(MtkE';f_YAu>\rjb[8To9*;'Z!]'n;Xhko4AaCe'u``RF9nQH.S[QO&g/n/c7?fb!Z*BkHj=R)Oef9IYj+hh0B%Uj\dTEBh"&p/%!0YNJX/Q<Ui`6s+EXUnUTIL:IMBW?lO57*DrK8G3T+^'bH[N2H[Qg4X1uOs959%)?ZefVB`JTDD5ZsaUkpNo0a2sA1&q2+2^R*pd%p0?!beO#TYj[eapA+9O;,SBqMQ/rGN2NV2NRP:L#KM\b,KUMBk+:]7]dkqo\Sg(YopoH5[2r3\;B$NIg2!(Q1E#cGG#pdA=ln$9)%6A"p*F<^"4R3D%L6mGW4:#=;q'.<Vo\,f#ZT6A]"+U[_??g^P>:_7:pn!<W>?J,5HiWP=h-5,c)j>@0^;E@Do.N-Nq-Pu9aq%qR7%IoV[$:N0+qgpT7'Ut2`:ea.B!]s'rB<PD[2I#@DO8FkHtdOl?>\Fo7=6t4-n@tR%hV>24iU3M5Jg]:Yr^MBfVLq\EF9@1)Z<ebAp%$KqgI4a-V%l(V@8g7HBB\-@eC+m3'%Pi8!rV/g!U\4m`.#H1@2l,uE:;&fh[]183Pgge^r=X<X$J9H89OlLgRgE&/"V;tqb<Y$-X%Q]G%t?2*$ebtg'@C1VV,$$i&6K,a3,@L"mWH0m1d?,IEjS`fNkL6W&bqSUe=<<qkfQm5Pf!/.[RLJ+.X$lkf<Tb/H:Dl5'2bb=L7%4ONjGS96ktiq.5nV;pJuX32]5J(<Xj8<8_j8.^,`-Wk,Dc)JGe&KQZBFV+:uA_5M2[O2Orqq9M'dhQf[!hQj:HB$o]QZjPd;Lh-j%Ft)&EeeL>CGf%K-:Q.Af[K--FTE#FO3W$0fhYdT!UW5q=WKlA>$$b/.gJu3R3j"\d'<`1kIk[r>#/IgUY-n<Vi(6$gL#p`--O*B$%?qghbno'GmL7ku2L6]g[=BG,SnVA6oKZA>L'H\SHgK@Ydn=1i`BcES03uILCdY!pg4$tJcg']jLMMAHE,H(ZXBka=CXK4M!3r^":%rn%OWJF5N^^;@b-hYO2`c.oR"Q]m*gOd0,jb=2spDTE\)6p/tmF(934&#((bjBB6=R.)OP.2I)h"7[nZ8/C)GYc'%#$gH&i'+H"3%?jUh<3A*Di969S^2"X,..M2_IVTF9!ejM,Bpu#hVUHS8&ElKg_i)S%D`9KL<MRG^?hrPt)n=)G__8MU_N"uZ7Q^Ef7B<`!hl%`T#%Kg*'@l1-;H\%[LQ%LXL:cu60#2B29p9fRstB-[Jii?11lTP,:!K*aah(h?:cbBH1fLT<S?g8pg3D3JBS`eb=,HspS+PO1YkPo-;N%MV>.bLmMPsjs5WOLaI,.P7bk$mVidC\ULk0XFq6QId!e7$,IcO3F+MdK_Ug@d,nmjk,B+HqeXq7N!?[IS.,_*iG:Je%;3REHT54<%1rJ!#d#@*&"3kLs1!kkkMh,J")[9K`fl4/QTJZtVnZ4`a%HfoZcCX;U6p19`+J8Z<np,5+I,adl$g*``=c9!Q3iKCC&UE_/p+1dk%&qS=0#:'A!+E\tS$%ea:,SK";,nZ*hOpJLWZMP[FRWeo:JUMh%2g]CeO=9EHH&0H2?:u>]5^$?QoZNXT7ij)iab0=`J[S)[l"ZTW%OiH)](5&N%0W<bp'YPr+#M9_g%RkbsF"=ut$;Rt.8pp$^0]mLKi[&WX$Fd5=a0iF![h!AF9\:YI)\KDJ#l;jYE(H!hd(Ib.)PdcN%#l0j>KG.@iIe#LZ,g&[%d>HTA'a"#NJEWaI?*=AD8Wqt]:/W)h`M[KcN.0s-)tASgX0K3hmu&t@(a1S7@f.9hfbq,UXdD>j]A=qM%oBAN\oLgUb!M"=r02!^YBas<8,S^[&"5$+!hUPOnY0Xg-E.ARuFu'AYTbJdn/qG4mB."KJ7l,m8+L0UgORE@`7LD;8IK=gDBIrV0%^ebR$JJ;?YaMO3U"7Thf)e&1,,j+qi$#BmP2V;[iKn.j5Ghg^U#9Sk?,8TQ.mn"]?EI@M+r2+Ag0'CKb.^Susq*BRli(\H\::sZR%pp-lcjcsn/HMV5;hl].D9a7Q"SF73PC\;I3on%OETD4E<XWAc4H_(L-`6F<&N0g/7aCkjL7Ln`2lnSneid0<ALb!XL.G-ffN/IVe%KKnJTgH0BW%]b26RY:mjG&Kj::X`u=N#B:6-)#JG!OIgO`g+14?lADQ?"k_BZi&#p'sTTf`P0[3T:^j])NeLp`RZ<5)H5:LaJg:D%)+/HYj58T%T9b0V1WT9",5/u,dFW8P+d,"!%E:@R';%c?4*X<K8)Y-/oH`bfjPe.uqDi%RP?!PCje`f<g'4<-#j']%*/']\jhM!F%ZVI/00<eFka0Y+L-,I)@]R+6*%e6T*n_U6niMnJsp8q&Q_F.]6$JHMBXQPLu$)5BM`ik@+_`A"Xm>1p_W]12q1g\\+cXrD[$r.5r%,iok'<f+U@g:UUs$iB(',10s7]u2i='&:*B]+(p^,Jcg^VR^D3Yh6*mD0O;)F]8LZcQB1X64%q4jS\e?^aQ=._W\nkP2hI0X8\^:%rgD*%dF"FP29R!kgNfEVfi;??kOg%&?gUX1..Ji=MWIj/Xfn(4`r&e9`Rp$<FlWC%A;rD%KDN_N*ZZE<k<appS#k7t:T2"#g1=bk%_\rCLQ`VU?Fb<+C+007hfLnBiLg4YnTO,pKP7S+['%FD@Q1M!#k$L&7W.O];Wl^[kfp<0];.X64Zc1a:HaU&]$i"tO/DE-d<#\]6%b3X;;fCdt6i]c0NbHHUlCU0C2K1.5*V23Gj-(WX>r:a@m26Wjp@@U-H3j8./F,<=CFnIWLTA`LM=1A'(Yc*IRM>n!W#7.hDlPb%r%=]h49gs/mjVopjQm*9):B3XPQ_4q5&5lOlfF(bEn3RIrC2,Koi_!_hI26b=jKJ*n\20G-MKqH0"?_:r>IAB'.Ai$TplA;8Ok%Y\4%!@OH$X4D2J=FI"fcZPf*FV:_/H]FO\fs%%kAn-fs1&O4JUQ*jAMH-c5<>^J[j$$DLAlbR>SHRZJIT$*S7r+`;&G.iMU<4lu,]VTH%3UMh!g.iqS*:'!ld_Fh,IbdMMbTL>??KfiQKLcmsOf=U0r.9\I35@d7iCk9d*YOq[rZ.atim43ZF8UGS^CQLPP>n/fcW-/VfVbVR%fmgUL8&6N$83QY-`(0Cf'Ft*rdEb=e9UQ!!Ng\.*&rcek-;fQbd.P0]Nd(n+0>`MlDYWe(N&EKe!9KEIi#2f0PH6FXj>HuJ4d#;F%eODOXK6cCSBl:%#qIKJ5VUo=0i.!uVOsrceRjjAkFTee4@:;L)E8$H>a,^)`8N\IccdA6%#I8OY8[JI:TIDT@0ccidB$W_t=c3a9%@^1\Lg@iR\.!)#E6[JQb/'fA6"YK<;(j]MC_4l%-<Gn:-?qQBo>#Y'iL$$<]F$k!LpmqRS8H[e<M,--2G--dEVDX:rJYpG9kBkSO%*XWkQ2bhq(QKP0-RQ^;lnpZDcW&+Fb/X_R03RY0+ConYSDp]!KGRUsr,PJRCOUfp?cA_aAA]f6=.8)*Y%@G?$Y/iPsnP<_=>N-I^%LXFL&Dt>X8[V5[19$JR5.X/TKNA$X!Fcd&h3=CJ;Drr#YNcjf;C'WblpVgg))U3OjElP+_ofj(f>%G]9fZ&iNa;$(bLl9s-@uYO$%b=@i/;:@NF<iX`LH8hT?oO;^Gjll&,Y4GuuriCQuqNG\@Hi7K_]+BW/O1hbOM?c,FqlgDfM;#@*]kVd1DI_=qGZq*R$.9Mk1k:n?%g<.E.WAmi:M8uXt`eolK*pG&X*#?IHP1".t5RMMD0j4^FL4C%]nIhl7LmE/;!70?GZ]RPD5d`]C/F"R7e0S(]`_'JgbTNJ%7_Wqc%>,Y`MpWh[!QZ0edSaYh-dreEh<+hbnN]O,MKX:!U=rka9835?m2%jM9iNkb<`hIi)\u4.V`6W^+<4C-pSb"lmYB&f9[TLD/hVJlh%APs6_S^u![f2o*0o^<TsW.-dBN<u#uWq)&dONW"41WYYXmE9D<NH7dkGP<S[Rg"\#$]DE]%I]Kfj/S%SVcqi2;Y_oEFK4tjXZq0T%$kXPTZTXY<0(2iIWdnRX^gL/=#P`g\#L+]IWN5F_?2:<X386H1"AY[h+L,ffF5stq#1m^P8UO4b"+)>,0M.Tp[(G$n_lb4&B6Uqi%CZk65^']?@Z8spUi)fmWIV,7;/2o)s!t/R%+-Ho[;+4eD2S'b%C1s%gDZmSb0JuV*H=_4N6N:<Ij9;W]1gEDREoHpJX4Ot@"mWfQ%bD#5sb:T`)l%Wr\`oFnYCUHl6i#_$PJ]!-<D)L4Ro!3P12&TYeb'1KM*HuBsa+&S'rD5(d\k;pn"lid1WP>Tn;B[$tT/)%U!%q3*%dr2O$b6Y('I])II,r`'K_:5aD3bLeoXR[]B.)I'%JG1`!DR+SVWGTdhhJ?L"&\gC:hi\AN%F4lt=Y/j.n*[esCEY/j=>+=A"pi1`%I`g#Tb7C'Np'!,q^2_3M]1Hjs+jXRPO8`7!50p^-VHU[iJS`a#J(nk&2Y=T`'7RI%?h9L%DI.)<TFKf97iWU!"fgr^>X'>u%e4;2%AdOaj]f]?KXlp-[;9cl<Mo4p4X)]!mI`Jl'p!5&j^Hi[KjM>k4-FMUBq/ZAEc%)9m3WFR`rF&&GX)1#G:LSDA,2:Toq<fA^OWT_A%`;!i6'e`&+mfk/PK<=Yh@`cf.c*'L:\QphVl[-!p""Csc(,>@X<aFn3X6[[HD2\Z^8RGT#K_U#&AlYU,LXZ/oF'^M>RsM$jSFNT4%h7o>Soc*Bek#sW"rJ+1V:H./n&b4HJ"$e!E5fESIo.G0k\sZQ$]l<+6;:U]ie?\^-Lj<"`6IJ0TRI7`/L[_f8;11gI5tm2eK=J8E%1ttN99,FB_F]ND2R:?-m:0"c.31K$E\/\QS2'B'\#$`IW[Y=B:5&ae)C4LE?D:[I]q3Z#f]O(RF&Y5!YVCK#$Nu,4p][&Og#BFqJ%5rq??M46>a2D*M'P7I7gZ.sFdX).Bm)\<B/lYL!qjDWm8DmiB:kn;9.F.%6Dl[1/>4LJ.9W=eUo-D*5s1M0dPQ1I0U>?RtC;_6,I%C%>W#qdFC3nNjW9*TVLN>cZ/)K8X*%Ug5FX*QYLgo1`QKjA'i]f5!>ce72.VAmX#GI*qBeBDeH<>03?f/nJUOF-\+M<,M-SP)Ja?%2j^<,ZcMUn%No\uC[7@;Rbd)5^'^,E%lM1LC5hp"gk/#qS^--p?K&ceL1rXdZipJ9rkIpYW[8>GB8-5O\F`p4X/&f`i+HQ9iJCdN%a'KMX0j7sZ**A]MYVodH?t"iL7Pnpr@'L(DPTdhahBA8OG;f"=SeIf/1;jc_d")XT6CV^`24lRF2?K5T&UIc8GZk]*9YsSmNiD.S%VTq#qb2^I(#<i`safS38ZmD`a0Ff8W*i;7/#&qCXo*J?.)O&oCH/K?ERbYKmR8-h/U-R/c'@MH2jqFTnD5lT1dm9@_C-LlEY2j<G%_3hD(8b+Rtb&2p,aQ1nuc?)XYDE@GCUmb)rCW9V%gImn\[k;Zt93QJe8R`gmI'R;go5sgK0eq4+P!!0g4?t='d`<3$RSV-0JZ`f_%,FOX.5)G5=ktE&H@jJ]mNmtt6/D$-,89fK/E1X&>DahVH(G=TNA68T)3a3@lJR*,u)n>Vk_;m.SWt^rk2ei[sb5Su`"c1;FkXlS]%s#Bj6"l3pE~>%AI9_PrivateDataEnd